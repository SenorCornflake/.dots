  1  h   "lua/neovim_configuration/themes/github.lua" line 6
  4  h   "lua/neovim_configuration/theme.lua" line 4
 10 #h   "init.lua"                     line 6
 17 %a + "~/repos/dotfiles/.config/nvim/output.txt" line 5
  1  h   "lua/neovim_configuration/themes/github.lua" line 6
  4  h   "lua/neovim_configuration/theme.lua" line 4
 10 #h   "init.lua"                     line 6
 17 %a + "~/repos/dotfiles/.config/nvim/output.txt" line 5

<1>{
  _G = <2>{
    COQbigger_preview = <function 1>,
    COQbuf_enter = <function 2>,
    COQcmp_changed = <function 3>,
    COQcomp_done = <function 4>,
    COQft_changed = <function 5>,
    COQgo_show = <function 6>,
    COQhelp = <function 7>,
    COQinsert_enter = <function 8>,
    COQkill_float_wins = <function 9>,
    COQkill_win = <function 10>,
    COQlaunch_loop = <function 11>,
    COQlistener = <function 12>,
    COQload_snips = <function 13>,
    COQlsp_comp = <function 14>,
    COQlsp_notify = <function 15>,
    COQlsp_preview = <function 16>,
    COQnav_mark = <function 17>,
    COQnew_cwd = <function 18>,
    COQnow = <function 19>,
    COQomnifunc = <function 20>,
    COQon_focus = <function 21>,
    COQpreview_preview = <function 22>,
    COQstats = <function 23>,
    COQts_notify = <function 24>,
    COQts_req = <function 25>,
    COQupdate_pumheight = <function 26>,
    COQwhen_idle = <function 27>,
    Deque = <3>{
      __index = <table 3>,
      clear = <function 28>,
      ipairs_left = <function 29>,
      ipairs_right = <function 30>,
      is_empty = <function 31>,
      len = <function 32>,
      new = <function 33>,
      popleft = <function 34>,
      popright = <function 35>,
      pushleft = <function 36>,
      pushright = <function 37>
    },
    MPairs = <4>{
      add_rule = <function 38>,
      add_rules = <function 39>,
      autopairs_afterquote = <function 40>,
      autopairs_bs = <function 41>,
      autopairs_closequote_expr = <function 42>,
      autopairs_cr = <function 43>,
      autopairs_insert = <function 44>,
      autopairs_map = <function 45>,
      check_break_line_char = <function 46>,
      clear_rules = <function 47>,
      config = {
        check_ts = false,
        disable_filetype = { "TelescopePrompt", "spectre_panel" },
        enable_afterquote = true,
        enable_check_bracket_line = true,
        enable_moveright = true,
        ignored_next_char = "[%w%%%'%[%\"%.]",
        rules = { {
            cr_cond = { <function 48> },
            del_cond = {},
            end_pair = "-->",
            end_pair_func = false,
            filetypes = { "html" },
            is_endwise = false,
            is_regex = false,
            key_map = "",
            pair_cond = {},
            start_pair = "<!--",
            <metatable> = {
              __index = <5>{
                can_cr = <function 49>,
                can_del = <function 50>,
                can_move = <function 51>,
                can_pair = <function 52>,
                end_wise = <function 53>,
                get_end_pair = <function 54>,
                get_end_pair_length = <function 55>,
                new = <function 56>,
                only_cr = <function 57>,
                replace_endpair = <function 58>,
                set_end_pair_length = <function 59>,
                use_key = <function 60>,
                use_regex = <function 61>,
                with_cr = <function 62>,
                with_del = <function 63>,
                with_move = <function 64>,
                with_pair = <function 65>
              }
            }
          }, {
            cr_cond = {},
            del_cond = {},
            end_pair = "```",
            end_pair_func = false,
            filetypes = { "markdown", "vimwiki" },
            is_endwise = false,
            is_regex = false,
            key_map = "",
            pair_cond = {},
            start_pair = "```",
            <metatable> = {
              __index = <table 5>
            }
          }, {
            cr_cond = {},
            del_cond = false,
            end_pair = "```",
            end_pair_func = false,
            filetypes = { "markdown", "vimwiki" },
            is_endwise = false,
            is_regex = true,
            key_map = "",
            move_cond = false,
            pair_cond = false,
            start_pair = "```.*$",
            <metatable> = {
              __index = <table 5>
            }
          }, {
            cr_cond = {},
            del_cond = {},
            end_pair = '"""',
            end_pair_func = false,
            filetypes = { "python" },
            is_endwise = false,
            is_regex = false,
            key_map = "",
            pair_cond = {},
            start_pair = '"""',
            <metatable> = {
              __index = <table 5>
            }
          }, <6>{
            cr_cond = {},
            del_cond = {},
            end_pair = "'",
            end_pair_func = false,
            is_endwise = false,
            is_regex = false,
            key_map = "'",
            move_cond = { <function 66> },
            pair_cond = { <function 67>, <function 68>, <function 69> },
            start_pair = "'",
            <metatable> = {
              __index = <table 5>
            }
          }, <7>{
            cr_cond = {},
            del_cond = {},
            end_pair = "`",
            end_pair_func = false,
            is_endwise = false,
            is_regex = false,
            key_map = "`",
            move_cond = { <function 70> },
            pair_cond = { <function 71>, <function 72> },
            start_pair = "`",
            <metatable> = {
              __index = <table 5>
            }
          }, <8>{
            cr_cond = {},
            del_cond = {},
            end_pair = '"',
            end_pair_func = false,
            is_endwise = false,
            is_regex = false,
            key_map = '"',
            move_cond = { <function 73> },
            pair_cond = { <function 74>, <function 75> },
            start_pair = '"',
            <metatable> = {
              __index = <table 5>
            }
          }, <9>{
            cr_cond = {},
            del_cond = {},
            end_pair = ")",
            end_pair_func = false,
            is_endwise = false,
            is_regex = false,
            key_map = "(",
            move_cond = { <function 76> },
            pair_cond = { <function 77>, <function 78>, <function 79> },
            start_pair = "(",
            <metatable> = {
              __index = <table 5>
            }
          }, <10>{
            cr_cond = {},
            del_cond = {},
            end_pair = "]",
            end_pair_func = false,
            is_endwise = false,
            is_regex = false,
            key_map = "[",
            move_cond = { <function 80> },
            pair_cond = { <function 81>, <function 82>, <function 83> },
            start_pair = "[",
            <metatable> = {
              __index = <table 5>
            }
          }, <11>{
            cr_cond = {},
            del_cond = {},
            end_pair = "}",
            end_pair_func = false,
            is_endwise = false,
            is_regex = false,
            key_map = "{",
            move_cond = { <function 84> },
            pair_cond = { <function 85>, <function 86>, <function 87> },
            start_pair = "{",
            <metatable> = {
              __index = <table 5>
            }
          }, {
            cr_cond = {},
            del_cond = false,
            end_pair = "<",
            end_pair_func = false,
            filetypes = { "html", "typescript", "typescriptreact", "svelte", "vue", "xml" },
            is_endwise = false,
            is_regex = false,
            move_cond = false,
            pair_cond = false,
            start_pair = ">",
            <metatable> = {
              __index = <table 5>
            }
          }, <12>{
            cr_cond = {},
            del_cond = {},
            end_pair = " ",
            end_pair_func = false,
            is_endwise = false,
            is_regex = false,
            key_map = " ",
            pair_cond = { <function 88> },
            start_pair = " ",
            <metatable> = {
              __index = <table 5>
            }
          }, <13>{
            cr_cond = {},
            del_cond = {},
            end_pair = " )",
            end_pair_func = false,
            is_endwise = false,
            is_regex = false,
            key_map = ")",
            move_cond = { <function 89> },
            pair_cond = { <function 90> },
            start_pair = "( ",
            <metatable> = {
              __index = <table 5>
            }
          }, <14>{
            cr_cond = {},
            del_cond = {},
            end_pair = " }",
            end_pair_func = false,
            is_endwise = false,
            is_regex = false,
            key_map = "}",
            move_cond = { <function 91> },
            pair_cond = { <function 92> },
            start_pair = "{ ",
            <metatable> = {
              __index = <table 5>
            }
          }, <15>{
            cr_cond = {},
            del_cond = {},
            end_pair = " ]",
            end_pair_func = false,
            is_endwise = false,
            is_regex = false,
            key_map = "]",
            move_cond = { <function 93> },
            pair_cond = { <function 94> },
            start_pair = "[ ",
            <metatable> = {
              __index = <table 5>
            }
          } },
        ts_config = {
          javascript = { "string", "template_string" },
          lua = { "string", "source" }
        }
      },
      disable = <function 95>,
      enable = <function 96>,
      esc = <function 97>,
      force_attach = <function 98>,
      get_rule = <function 99>,
      init = <function 100>,
      on_attach = <function 101>,
      remove_rule = <function 102>,
      setup = <function 103>,
      state = {
        buf_ts = {},
        disabled = false,
        rules = { <table 14>, <table 15>, <table 13>, <table 11>, <table 7>, <table 10>, <table 9>, <table 6>, <table 8>, <table 12> }
      }
    },
    SetupLspColors = <function 104>,
    _G = <table 2>,
    _PlenaryLeafTable = {
      [<function 105>] = 2,
      [<function 106>] = 2,
      [<function 107>] = 3,
      [<function 108>] = 2,
      [<function 109>] = 4,
      [<function 110>] = 2,
      [<function 111>] = 1,
      <metatable> = {
        __mode = "k"
      }
    },
    _VERSION = "Lua 5.1",
    _packer = {
      profile_output = { "Defining lazy-load commands took 0.126411ms", "Defining lazy-load filetype autocommands took 0.018392ms", "Defining packer_plugins took 0.009703ms", "Defining lazy-load event autocommands took 0.009216ms", "Luarocks path setup took 0.003313ms", "try_loadstring definition took 0.00024ms" }
    },
    assert = <function 112>,
    bit = <16>{
      arshift = <function 113>,
      band = <function 114>,
      bnot = <function 115>,
      bor = <function 116>,
      bswap = <function 117>,
      bxor = <function 118>,
      lshift = <function 119>,
      rol = <function 120>,
      ror = <function 121>,
      rshift = <function 122>,
      tobit = <function 123>,
      tohex = <function 124>
    },
    collectgarbage = <function 125>,
    coq = <17>{
      COQdeps = <function 126>,
      COQhelp = <function 127>,
      COQnow = <function 128>,
      COQstats = <function 129>,
      lsp_ensure_capabilities = <function 130>,
      <metatable> = {
        __call = <function 131>
      }
    },
    coroutine = <18>{
      create = <function 132>,
      resume = <function 133>,
      running = <function 134>,
      status = <function 135>,
      wrap = <function 136>,
      yield = <function 137>
    },
    debug = <19>{
      debug = <function 138>,
      getfenv = <function 139>,
      gethook = <function 140>,
      getinfo = <function 141>,
      getlocal = <function 142>,
      getmetatable = <function 143>,
      getregistry = <function 144>,
      getupvalue = <function 145>,
      setfenv = <function 146>,
      sethook = <function 147>,
      setlocal = <function 148>,
      setmetatable = <function 149>,
      setupvalue = <function 150>,
      traceback = <function 151>,
      upvalueid = <function 152>,
      upvaluejoin = <function 153>
    },
    dofile = <function 154>,
    dump = <function 155>,
    error = <function 156>,
    gcinfo = <function 157>,
    getfenv = <function 158>,
    getmetatable = <function 159>,
    io = <20>{
      close = <function 160>,
      flush = <function 161>,
      input = <function 162>,
      lines = <function 163>,
      open = <function 164>,
      output = <function 165>,
      popen = <function 166>,
      read = <function 167>,
      stderr = <userdata 1>,
      stdin = <userdata 2>,
      stdout = <userdata 3>,
      tmpfile = <function 168>,
      type = <function 169>,
      write = <function 170>
    },
    ipairs = <function 171>,
    jit = <21>{
      arch = "x64",
      attach = <function 172>,
      flush = <function 173>,
      off = <function 174>,
      on = <function 175>,
      opt = <22>{
        start = <function 176>
      },
      os = "Linux",
      status = <function 177>,
      util = <23>{
        funcbc = <function 178>,
        funcinfo = <function 179>,
        funck = <function 180>,
        funcuvname = <function 181>,
        ircalladdr = <function 182>,
        traceexitstub = <function 183>,
        traceinfo = <function 184>,
        traceir = <function 185>,
        tracek = <function 186>,
        tracemc = <function 187>,
        tracesnap = <function 188>
      },
      version = "LuaJIT 2.0.5",
      version_num = 20005
    },
    load = <function 189>,
    loadfile = <function 190>,
    loadstring = <function 191>,
    lsp_complete_configured_servers = <function 192>,
    lsp_get_active_client_ids = <function 193>,
    math = <24>{
      abs = <function 194>,
      acos = <function 195>,
      asin = <function 196>,
      atan = <function 197>,
      atan2 = <function 198>,
      ceil = <function 199>,
      cos = <function 200>,
      cosh = <function 201>,
      deg = <function 202>,
      exp = <function 203>,
      floor = <function 204>,
      fmod = <function 205>,
      frexp = <function 206>,
      huge = inf,
      ldexp = <function 207>,
      log = <function 208>,
      log10 = <function 209>,
      max = <function 210>,
      min = <function 211>,
      mod = <function 205>,
      modf = <function 212>,
      pi = 3.1415926535898,
      pow = <function 213>,
      rad = <function 214>,
      random = <function 215>,
      randomseed = <function 216>,
      sin = <function 217>,
      sinh = <function 218>,
      sqrt = <function 219>,
      tan = <function 220>,
      tanh = <function 221>
    },
    module = <function 222>,
    newproxy = <function 223>,
    next = <function 224>,
    nvim_bufferline = <function 225>,
    os = <25>{
      clock = <function 226>,
      date = <function 227>,
      difftime = <function 228>,
      execute = <function 229>,
      exit = <function 230>,
      getenv = <function 231>,
      remove = <function 232>,
      rename = <function 233>,
      setlocale = <function 234>,
      time = <function 235>,
      tmpname = <function 236>
    },
    package = <26>{
      config = "/\n;\n?\n!\n-",
      cpath = "./?.so;/usr/local/lib/lua/5.1/?.so;/usr/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so;/home/a/.cache/nvim/packer_hererocks/2.0.5/lib/lua/5.1/?.so",
      loaded = <table 1>,
      loaders = { <function 237>, <function 238>, <function 239>, <function 240>, <function 241> },
      loadlib = <function 242>,
      path = "./?.lua;/usr/share/luajit-2.0.5/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua;/usr/share/lua/5.1/?.lua;/usr/share/lua/5.1/?/init.lua;/home/a/.cache/nvim/packer_hererocks/2.0.5/share/lua/5.1/?.lua;/home/a/.cache/nvim/packer_hererocks/2.0.5/share/lua/5.1/?/init.lua;/home/a/.cache/nvim/packer_hererocks/2.0.5/lib/luarocks/rocks-5.1/?.lua;/home/a/.cache/nvim/packer_hererocks/2.0.5/lib/luarocks/rocks-5.1/?/init.lua",
      preload = {
        ffi = <function 243>
      },
      searchpath = <function 244>,
      seeall = <function 245>
    },
    packer_plugins = {
      ["coq.artifacts"] = {
        load_after = {},
        loaded = true,
        needs_bufread = false,
        path = "/home/a/.local/share/nvim/site/pack/packer/opt/coq.artifacts"
      },
      coq_nvim = {
        after = { "lspkind-nvim", "nvim-lspconfig", "coq.artifacts" },
        commands = { "COQnow", "COQhelp", "COQstats", "COQdeps" },
        config = { "\27LJ\1\2@\0\0\2\0\2\0\0044\0\0\0%\1\1\0>\0\2\1G\0\1\0%neovim_configuration.plugins.coq\frequire\0" },
        loaded = true,
        needs_bufread = false,
        path = "/home/a/.local/share/nvim/site/pack/packer/opt/coq_nvim"
      },
      ["fzf-lua"] = {
        commands = { "FzfLua" },
        config = { "\27LJ\1\2@\0\0\2\0\2\0\0044\0\0\0%\1\1\0>\0\2\1G\0\1\0%neovim_configuration.plugins.fzf\frequire\0" },
        loaded = true,
        needs_bufread = false,
        path = "/home/a/.local/share/nvim/site/pack/packer/opt/fzf-lua"
      },
      ["github-nvim-theme"] = {
        loaded = true,
        path = "/home/a/.local/share/nvim/site/pack/packer/start/github-nvim-theme"
      },
      ["gitsigns.nvim"] = {
        config = { "\27LJ\1\2E\0\0\2\0\2\0\0044\0\0\0%\1\1\0>\0\2\1G\0\1\0*neovim_configuration.plugins.gitsigns\frequire\0" },
        loaded = true,
        needs_bufread = false,
        path = "/home/a/.local/share/nvim/site/pack/packer/opt/gitsigns.nvim"
      },
      ["hop.nvim"] = {
        commands = { "HopChar1" },
        config = { "\27LJ\1\2@\0\0\2\0\2\0\0044\0\0\0%\1\1\0>\0\2\1G\0\1\0%neovim_configuration.plugins.hop\frequire\0" },
        loaded = false,
        needs_bufread = false,
        path = "/home/a/.local/share/nvim/site/pack/packer/opt/hop.nvim"
      },
      ["lspkind-nvim"] = {
        config = { "\27LJ\1\2D\0\0\2\0\2\0\0044\0\0\0%\1\1\0>\0\2\1G\0\1\0)neovim_configuration.plugins.lspkind\frequire\0" },
        load_after = {},
        loaded = true,
        needs_bufread = false,
        path = "/home/a/.local/share/nvim/site/pack/packer/opt/lspkind-nvim"
      },
      ["nvim-autopairs"] = {
        config = { "\27LJ\1\2F\0\0\2\0\2\0\0044\0\0\0%\1\1\0>\0\2\1G\0\1\0+neovim_configuration.plugins.autopairs\frequire\0" },
        loaded = true,
        needs_bufread = false,
        path = "/home/a/.local/share/nvim/site/pack/packer/opt/nvim-autopairs"
      },
      ["nvim-bufferline.lua"] = {
        config = { "\27LJ\1\2G\0\0\2\0\2\0\0044\0\0\0%\1\1\0>\0\2\1G\0\1\0,neovim_configuration.plugins.bufferline\frequire\0" },
        loaded = true,
        needs_bufread = false,
        path = "/home/a/.local/share/nvim/site/pack/packer/opt/nvim-bufferline.lua"
      },
      ["nvim-fzf"] = {
        loaded = true,
        path = "/home/a/.local/share/nvim/site/pack/packer/start/nvim-fzf"
      },
      ["nvim-lspconfig"] = {
        config = { "\27LJ\1\2F\0\0\2\0\2\0\0044\0\0\0%\1\1\0>\0\2\1G\0\1\0+neovim_configuration.plugins.lspconfig\frequire\0" },
        load_after = {},
        loaded = true,
        needs_bufread = false,
        path = "/home/a/.local/share/nvim/site/pack/packer/opt/nvim-lspconfig"
      },
      ["nvim-treesitter"] = {
        config = { "\27LJ\1\2G\0\0\2\0\2\0\0044\0\0\0%\1\1\0>\0\2\1G\0\1\0,neovim_configuration.plugins.treesitter\frequire\0" },
        loaded = true,
        needs_bufread = true,
        path = "/home/a/.local/share/nvim/site/pack/packer/opt/nvim-treesitter"
      },
      ["nvim-web-devicons"] = {
        loaded = true,
        path = "/home/a/.local/share/nvim/site/pack/packer/start/nvim-web-devicons"
      },
      ["packer.nvim"] = {
        loaded = false,
        needs_bufread = false,
        path = "/home/a/.local/share/nvim/site/pack/packer/opt/packer.nvim"
      },
      ["plenary.nvim"] = {
        loaded = true,
        path = "/home/a/.local/share/nvim/site/pack/packer/start/plenary.nvim"
      },
      ["surround.nvim"] = {
        config = { "\27LJ\1\2E\0\0\2\0\2\0\0044\0\0\0%\1\1\0>\0\2\1G\0\1\0*neovim_configuration.plugins.surround\frequire\0" },
        loaded = true,
        needs_bufread = false,
        path = "/home/a/.local/share/nvim/site/pack/packer/opt/surround.nvim"
      },
      ["symbols-outline.nvim"] = {
        commands = { "SymbolsOutline" },
        config = { "\27LJ\1\2L\0\0\2\0\2\0\0044\0\0\0%\1\1\0>\0\2\1G\0\1\0001neovim_configuration.plugins.symbols-outline\frequire\0" },
        loaded = false,
        needs_bufread = false,
        path = "/home/a/.local/share/nvim/site/pack/packer/opt/symbols-outline.nvim"
      },
      ["telescope.nvim"] = {
        commands = { "Telescope" },
        config = { "\27LJ\1\2F\0\0\2\0\2\0\0044\0\0\0%\1\1\0>\0\2\1G\0\1\0+neovim_configuration.plugins.telescope\frequire\0" },
        loaded = false,
        needs_bufread = false,
        path = "/home/a/.local/share/nvim/site/pack/packer/opt/telescope.nvim"
      },
      ["vim-floaterm"] = {
        commands = { "FloatermNew" },
        config = { "\27LJ\1\2E\0\0\2\0\2\0\0044\0\0\0%\1\1\0>\0\2\1G\0\1\0*neovim_configuration.plugins.floaterm\frequire\0" },
        loaded = true,
        needs_bufread = false,
        path = "/home/a/.local/share/nvim/site/pack/packer/opt/vim-floaterm"
      },
      ["vim-fugitive"] = {
        commands = { "Git" },
        loaded = false,
        needs_bufread = true,
        path = "/home/a/.local/share/nvim/site/pack/packer/opt/vim-fugitive"
      },
      ["vim-hexokinase"] = {
        commands = { "HexokinaseToggle" },
        config = { "\27LJ\1\2G\0\0\2\0\2\0\0044\0\0\0%\1\1\0>\0\2\1G\0\1\0,neovim_configuration.plugins.hexokinase\frequire\0" },
        loaded = false,
        needs_bufread = false,
        path = "/home/a/.local/share/nvim/site/pack/packer/opt/vim-hexokinase"
      },
      ["vim-startuptime"] = {
        commands = { "StartupTime" },
        loaded = false,
        needs_bufread = false,
        path = "/home/a/.local/share/nvim/site/pack/packer/opt/vim-startuptime"
      }
    },
    pairs = <function 246>,
    pcall = <function 247>,
    print = <function 248>,
    rawequal = <function 249>,
    rawget = <function 250>,
    rawset = <function 251>,
    require = <function 252>,
    select = <function 253>,
    setfenv = <function 254>,
    setmetatable = <function 255>,
    string = <27>{
      byte = <function 256>,
      char = <function 257>,
      dump = <function 258>,
      find = <function 259>,
      format = <function 260>,
      gfind = <function 261>,
      gmatch = <function 261>,
      gsub = <function 262>,
      insert = <function 263>,
      isalnum = <function 264>,
      len = <function 265>,
      lower = <function 266>,
      match = <function 267>,
      remove = <function 268>,
      rep = <function 269>,
      reverse = <function 270>,
      set = <function 271>,
      split = <function 272>,
      sub = <function 273>,
      upper = <function 274>
    },
    table = <28>{
      concat = <function 275>,
      contains = <function 276>,
      foreach = <function 277>,
      foreachi = <function 278>,
      getn = <function 279>,
      insert = <function 280>,
      maxn = <function 281>,
      merge = <function 282>,
      remove = <function 283>,
      slice = <function 284>,
      sort = <function 285>
    },
    tonumber = <function 286>,
    tostring = <function 287>,
    type = <function 288>,
    unpack = <function 289>,
    vim = {
      F = <29>{
        if_nil = <function 290>,
        nil_wrap = <function 291>,
        npcall = <function 292>,
        ok_or_nil = <function 293>
      },
      NIL = vim.NIL,
      _create_ts_parser = <function 294>,
      _empty_dict_mt = <30>{
        __tostring = <function 295>
      },
      _expand_pat = <function 296>,
      _expand_pat_get_parts = <function 297>,
      _getvar = <function 298>,
      _load_package = <function 237>,
      _log_keystroke = <function 299>,
      _os_proc_children = <function 300>,
      _os_proc_info = <function 301>,
      _setvar = <function 302>,
      _so_trails = { "/?.so" },
      _system = <function 303>,
      _ts_add_language = <function 304>,
      _ts_get_language_version = <function 305>,
      _ts_has_language = <function 306>,
      _ts_inspect_language = <function 307>,
      _ts_parse_query = <function 308>,
      api = {
        nvim__buf_redraw_range = <function 309>,
        nvim__buf_stats = <function 310>,
        nvim__get_hl_defs = <function 311>,
        nvim__get_lib_dir = <function 312>,
        nvim__id = <function 313>,
        nvim__id_array = <function 314>,
        nvim__id_dictionary = <function 315>,
        nvim__id_float = <function 316>,
        nvim__inspect_cell = <function 317>,
        nvim__screenshot = <function 318>,
        nvim__set_hl_ns = <function 319>,
        nvim__stats = <function 320>,
        nvim_buf_add_highlight = <function 321>,
        nvim_buf_attach = <function 322>,
        nvim_buf_call = <function 323>,
        nvim_buf_clear_highlight = <function 324>,
        nvim_buf_clear_namespace = <function 325>,
        nvim_buf_del_extmark = <function 326>,
        nvim_buf_del_keymap = <function 327>,
        nvim_buf_del_var = <function 328>,
        nvim_buf_delete = <function 329>,
        nvim_buf_get_changedtick = <function 330>,
        nvim_buf_get_commands = <function 331>,
        nvim_buf_get_extmark_by_id = <function 332>,
        nvim_buf_get_extmarks = <function 333>,
        nvim_buf_get_keymap = <function 334>,
        nvim_buf_get_lines = <function 335>,
        nvim_buf_get_mark = <function 336>,
        nvim_buf_get_name = <function 337>,
        nvim_buf_get_number = <function 338>,
        nvim_buf_get_offset = <function 339>,
        nvim_buf_get_option = <function 340>,
        nvim_buf_get_var = <function 341>,
        nvim_buf_is_loaded = <function 342>,
        nvim_buf_is_valid = <function 343>,
        nvim_buf_line_count = <function 344>,
        nvim_buf_set_extmark = <function 345>,
        nvim_buf_set_keymap = <function 346>,
        nvim_buf_set_lines = <function 347>,
        nvim_buf_set_name = <function 348>,
        nvim_buf_set_option = <function 349>,
        nvim_buf_set_text = <function 350>,
        nvim_buf_set_var = <function 351>,
        nvim_buf_set_virtual_text = <function 352>,
        nvim_call_dict_function = <function 353>,
        nvim_call_function = <function 354>,
        nvim_chan_send = <function 355>,
        nvim_command = <function 356>,
        nvim_command_output = <function 357>,
        nvim_create_buf = <function 358>,
        nvim_create_namespace = <function 359>,
        nvim_del_current_line = <function 360>,
        nvim_del_keymap = <function 361>,
        nvim_del_var = <function 362>,
        nvim_echo = <function 363>,
        nvim_err_write = <function 364>,
        nvim_err_writeln = <function 365>,
        nvim_eval = <function 366>,
        nvim_exec = <function 367>,
        nvim_feedkeys = <function 368>,
        nvim_get_all_options_info = <function 369>,
        nvim_get_chan_info = <function 370>,
        nvim_get_color_by_name = <function 371>,
        nvim_get_color_map = <function 372>,
        nvim_get_commands = <function 373>,
        nvim_get_context = <function 374>,
        nvim_get_current_buf = <function 375>,
        nvim_get_current_line = <function 376>,
        nvim_get_current_tabpage = <function 377>,
        nvim_get_current_win = <function 378>,
        nvim_get_hl_by_id = <function 379>,
        nvim_get_hl_by_name = <function 380>,
        nvim_get_hl_id_by_name = <function 381>,
        nvim_get_keymap = <function 382>,
        nvim_get_mode = <function 383>,
        nvim_get_namespaces = <function 384>,
        nvim_get_option = <function 385>,
        nvim_get_option_info = <function 386>,
        nvim_get_proc = <function 387>,
        nvim_get_proc_children = <function 388>,
        nvim_get_runtime_file = <function 389>,
        nvim_get_var = <function 390>,
        nvim_get_vvar = <function 391>,
        nvim_input = <function 392>,
        nvim_input_mouse = <function 393>,
        nvim_list_bufs = <function 394>,
        nvim_list_chans = <function 395>,
        nvim_list_runtime_paths = <function 396>,
        nvim_list_tabpages = <function 397>,
        nvim_list_uis = <function 398>,
        nvim_list_wins = <function 399>,
        nvim_load_context = <function 400>,
        nvim_notify = <function 401>,
        nvim_open_term = <function 402>,
        nvim_open_win = <function 403>,
        nvim_out_write = <function 404>,
        nvim_parse_expression = <function 405>,
        nvim_paste = <function 406>,
        nvim_put = <function 407>,
        nvim_replace_termcodes = <function 408>,
        nvim_select_popupmenu_item = <function 409>,
        nvim_set_current_buf = <function 410>,
        nvim_set_current_dir = <function 411>,
        nvim_set_current_line = <function 412>,
        nvim_set_current_tabpage = <function 413>,
        nvim_set_current_win = <function 414>,
        nvim_set_decoration_provider = <function 415>,
        nvim_set_hl = <function 416>,
        nvim_set_keymap = <function 417>,
        nvim_set_option = <function 418>,
        nvim_set_var = <function 419>,
        nvim_set_vvar = <function 420>,
        nvim_strwidth = <function 421>,
        nvim_tabpage_del_var = <function 422>,
        nvim_tabpage_get_number = <function 423>,
        nvim_tabpage_get_var = <function 424>,
        nvim_tabpage_get_win = <function 425>,
        nvim_tabpage_is_valid = <function 426>,
        nvim_tabpage_list_wins = <function 427>,
        nvim_tabpage_set_var = <function 428>,
        nvim_win_call = <function 429>,
        nvim_win_close = <function 430>,
        nvim_win_del_var = <function 431>,
        nvim_win_get_buf = <function 432>,
        nvim_win_get_config = <function 433>,
        nvim_win_get_cursor = <function 434>,
        nvim_win_get_height = <function 435>,
        nvim_win_get_number = <function 436>,
        nvim_win_get_option = <function 437>,
        nvim_win_get_position = <function 438>,
        nvim_win_get_tabpage = <function 439>,
        nvim_win_get_var = <function 440>,
        nvim_win_get_width = <function 441>,
        nvim_win_hide = <function 442>,
        nvim_win_is_valid = <function 443>,
        nvim_win_set_buf = <function 444>,
        nvim_win_set_config = <function 445>,
        nvim_win_set_cursor = <function 446>,
        nvim_win_set_height = <function 447>,
        nvim_win_set_option = <function 448>,
        nvim_win_set_var = <function 449>,
        nvim_win_set_width = <function 450>
      },
      b = {
        <metatable> = {
          __index = <function 451>,
          __newindex = <function 452>
        }
      },
      bo = {
        <metatable> = {
          __index = <function 453>,
          __newindex = <function 454>
        }
      },
      call = <function 455>,
      cmd = <function 456>,
      deep_equal = <function 457>,
      deepcopy = <function 458>,
      defer_fn = <function 459>,
      empty_dict = <function 460>,
      endswith = <function 461>,
      env = {
        <metatable> = {
          __index = <function 462>,
          __newindex = <function 463>
        }
      },
      fn = {
        bufadd = <function 464>,
        bufload = <function 465>,
        bufname = <function 466>,
        bufwinnr = <function 467>,
        complete = <function 468>,
        delete = <function 469>,
        empty = <function 470>,
        executable = <function 471>,
        exists = <function 472>,
        expand = <function 473>,
        filereadable = <function 474>,
        fnameescape = <function 475>,
        fnamemodify = <function 476>,
        getenv = <function 477>,
        gettabinfo = <function 478>,
        glob = <function 479>,
        has = <function 480>,
        isdirectory = <function 481>,
        jobstart = <function 482>,
        json_decode = <function 483>,
        json_encode = <function 484>,
        line = <function 485>,
        mkdir = <function 486>,
        serverstart = <function 487>,
        setenv = <function 488>,
        shellescape = <function 489>,
        sign_define = <function 490>,
        sign_getdefined = <function 491>,
        sign_getplaced = <function 492>,
        sign_placelist = <function 493>,
        sign_unplace = <function 494>,
        stdpath = <function 495>,
        strwidth = <function 496>,
        system = <function 497>,
        systemlist = <function 498>,
        tabpagenr = <function 499>,
        tempname = <function 500>,
        termopen = <function 501>,
        winbufnr = <function 502>,
        winlayout = <function 503>,
        <metatable> = {
          __index = <function 504>
        }
      },
      funcref = <function 505>,
      g = {
        <metatable> = {
          __index = <function 506>,
          __newindex = <function 507>
        }
      },
      go = {
        <metatable> = {
          __index = <function 508>,
          __newindex = <function 509>
        }
      },
      gsplit = <function 510>,
      highlight = <31>{
        create = <function 511>,
        link = <function 512>,
        on_yank = <function 513>,
        range = <function 514>
      },
      in_fast_event = <function 515>,
      inspect = <32>{
        KEY = inspect.KEY,
        METATABLE = inspect.METATABLE,
        _DESCRIPTION = "human-readable representations of tables",
        _LICENSE = '    MIT LICENSE\n\n    Copyright (c) 2013 Enrique García Cota\n\n    Permission is hereby granted, free of charge, to any person obtaining a\n    copy of this software and associated documentation files (the\n    "Software"), to deal in the Software without restriction, including\n    without limitation the rights to use, copy, modify, merge, publish,\n    distribute, sublicense, and/or sell copies of the Software, and to\n    permit persons to whom the Software is furnished to do so, subject to\n    the following conditions:\n\n    The above copyright notice and this permission notice shall be included\n    in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n  ',
        _URL = "http://github.com/kikito/inspect.lua",
        _VERSION = "inspect.lua 3.1.0",
        inspect = <function 516>,
        <metatable> = {
          __call = <function 517>
        }
      },
      is_callable = <function 518>,
      list_extend = <function 519>,
      list_slice = <function 520>,
      log = {
        levels = {
          DEBUG = 1,
          ERROR = 4,
          INFO = 2,
          TRACE = 0,
          WARN = 3
        }
      },
      loop = <33>{
        accept = <function 521>,
        async_send = <function 522>,
        backend_fd = <function 523>,
        backend_timeout = <function 524>,
        cancel = <function 525>,
        chdir = <function 526>,
        check_start = <function 527>,
        check_stop = <function 528>,
        close = <function 529>,
        constants = {
          AF_APPLETALK = 5,
          AF_ATMPVC = 8,
          AF_AX25 = 3,
          AF_INET = 2,
          AF_INET6 = 10,
          AF_IPX = 4,
          AF_NETLINK = 16,
          AF_PACKET = 17,
          AF_UNIX = 1,
          AF_X25 = 9,
          AI_ADDRCONFIG = 32,
          AI_ALL = 16,
          AI_NUMERICHOST = 4,
          AI_NUMERICSERV = 1024,
          AI_PASSIVE = 1,
          AI_V4MAPPED = 8,
          O_APPEND = 1024,
          O_CREAT = 64,
          O_DSYNC = 4096,
          O_EXCL = 128,
          O_NOCTTY = 256,
          O_NONBLOCK = 2048,
          O_RDONLY = 0,
          O_RDWR = 2,
          O_RSYNC = 1052672,
          O_SYNC = 1052672,
          O_TRUNC = 512,
          O_WRONLY = 1,
          SIGABRT = 6,
          SIGALRM = 14,
          SIGBUS = 7,
          SIGCHLD = 17,
          SIGCONT = 18,
          SIGFPE = 8,
          SIGHUP = 1,
          SIGILL = 4,
          SIGINT = 2,
          SIGIO = 29,
          SIGIOT = 6,
          SIGKILL = 9,
          SIGPIPE = 13,
          SIGPOLL = 29,
          SIGPROF = 27,
          SIGPWR = 30,
          SIGQUIT = 3,
          SIGSEGV = 11,
          SIGSTKFLT = 16,
          SIGSTOP = 19,
          SIGSYS = 31,
          SIGTERM = 15,
          SIGTRAP = 5,
          SIGTSTP = 20,
          SIGTTIN = 21,
          SIGTTOU = 22,
          SIGURG = 23,
          SIGUSR1 = 10,
          SIGUSR2 = 12,
          SIGVTALRM = 26,
          SIGWINCH = 28,
          SIGXCPU = 24,
          SIGXFSZ = 25,
          SOCK_DGRAM = 2,
          SOCK_RAW = 3,
          SOCK_RDM = 4,
          SOCK_SEQPACKET = 5,
          SOCK_STREAM = 1,
          TCP_IPV6ONLY = 1,
          UDP_IPV6ONLY = 1,
          UDP_MMSG_CHUNK = 8,
          UDP_MMSG_FREE = 16,
          UDP_PARTIAL = 2,
          UDP_RECVMMSG = 256,
          UDP_REUSEADDR = 4
        },
        cpu_info = <function 530>,
        cwd = <function 531>,
        disable_stdio_inheritance = <function 532>,
        exepath = <function 533>,
        fileno = <function 534>,
        fs_access = <function 535>,
        fs_chmod = <function 536>,
        fs_chown = <function 537>,
        fs_close = <function 538>,
        fs_closedir = <function 539>,
        fs_copyfile = <function 540>,
        fs_event_getpath = <function 541>,
        fs_event_start = <function 542>,
        fs_event_stop = <function 543>,
        fs_fchmod = <function 544>,
        fs_fchown = <function 545>,
        fs_fdatasync = <function 546>,
        fs_fstat = <function 547>,
        fs_fsync = <function 548>,
        fs_ftruncate = <function 549>,
        fs_futime = <function 550>,
        fs_lchown = <function 551>,
        fs_link = <function 552>,
        fs_lstat = <function 553>,
        fs_lutime = <function 554>,
        fs_mkdir = <function 555>,
        fs_mkdtemp = <function 556>,
        fs_mkstemp = <function 557>,
        fs_open = <function 558>,
        fs_opendir = <function 559>,
        fs_poll_getpath = <function 560>,
        fs_poll_start = <function 561>,
        fs_poll_stop = <function 562>,
        fs_read = <function 563>,
        fs_readdir = <function 564>,
        fs_readlink = <function 565>,
        fs_realpath = <function 566>,
        fs_rename = <function 567>,
        fs_rmdir = <function 568>,
        fs_scandir = <function 569>,
        fs_scandir_next = <function 570>,
        fs_sendfile = <function 571>,
        fs_stat = <function 572>,
        fs_statfs = <function 573>,
        fs_symlink = <function 574>,
        fs_unlink = <function 575>,
        fs_utime = <function 576>,
        fs_write = <function 577>,
        get_constrained_memory = <function 578>,
        get_free_memory = <function 579>,
        get_process_title = <function 580>,
        get_total_memory = <function 581>,
        getaddrinfo = <function 582>,
        getgid = <function 583>,
        getnameinfo = <function 584>,
        getpid = <function 585>,
        getrusage = <function 586>,
        gettimeofday = <function 587>,
        getuid = <function 588>,
        guess_handle = <function 589>,
        handle_get_type = <function 590>,
        has_ref = <function 591>,
        hrtime = <function 592>,
        idle_start = <function 593>,
        idle_stop = <function 594>,
        if_indextoiid = <function 595>,
        if_indextoname = <function 596>,
        interface_addresses = <function 597>,
        is_active = <function 598>,
        is_closing = <function 599>,
        is_readable = <function 600>,
        is_writable = <function 601>,
        kill = <function 602>,
        listen = <function 603>,
        loadavg = <function 604>,
        loop_alive = <function 605>,
        loop_close = <function 606>,
        loop_configure = <function 607>,
        loop_mode = <function 608>,
        metrics_idle_time = <function 609>,
        new_async = <function 610>,
        new_check = <function 611>,
        new_fs_event = <function 612>,
        new_fs_poll = <function 613>,
        new_idle = <function 614>,
        new_pipe = <function 615>,
        new_poll = <function 616>,
        new_prepare = <function 617>,
        new_signal = <function 618>,
        new_socket_poll = <function 619>,
        new_tcp = <function 620>,
        new_thread = <function 621>,
        new_timer = <function 622>,
        new_tty = <function 623>,
        new_udp = <function 624>,
        new_work = <function 625>,
        now = <function 626>,
        os_environ = <function 627>,
        os_get_passwd = <function 628>,
        os_getenv = <function 629>,
        os_gethostname = <function 630>,
        os_getpid = <function 631>,
        os_getppid = <function 632>,
        os_getpriority = <function 633>,
        os_homedir = <function 634>,
        os_setenv = <function 635>,
        os_setpriority = <function 636>,
        os_tmpdir = <function 637>,
        os_uname = <function 638>,
        os_unsetenv = <function 639>,
        pipe = <function 640>,
        pipe_bind = <function 641>,
        pipe_chmod = <function 642>,
        pipe_connect = <function 643>,
        pipe_getpeername = <function 644>,
        pipe_getsockname = <function 645>,
        pipe_open = <function 646>,
        pipe_pending_count = <function 647>,
        pipe_pending_instances = <function 648>,
        pipe_pending_type = <function 649>,
        poll_start = <function 650>,
        poll_stop = <function 651>,
        prepare_start = <function 652>,
        prepare_stop = <function 653>,
        print_active_handles = <function 654>,
        print_all_handles = <function 655>,
        process_get_pid = <function 656>,
        process_kill = <function 657>,
        queue_work = <function 658>,
        random = <function 659>,
        read_start = <function 660>,
        read_stop = <function 661>,
        recv_buffer_size = <function 662>,
        ref = <function 663>,
        req_get_type = <function 664>,
        resident_set_memory = <function 665>,
        run = <function 666>,
        send_buffer_size = <function 667>,
        set_process_title = <function 668>,
        setgid = <function 669>,
        setuid = <function 670>,
        shutdown = <function 671>,
        signal_start = <function 672>,
        signal_start_oneshot = <function 673>,
        signal_stop = <function 674>,
        sleep = <function 675>,
        socketpair = <function 676>,
        spawn = <function 677>,
        stop = <function 678>,
        stream_get_write_queue_size = <function 679>,
        stream_set_blocking = <function 680>,
        tcp_bind = <function 681>,
        tcp_close_reset = <function 682>,
        tcp_connect = <function 683>,
        tcp_getpeername = <function 684>,
        tcp_getsockname = <function 685>,
        tcp_keepalive = <function 686>,
        tcp_nodelay = <function 687>,
        tcp_open = <function 688>,
        tcp_simultaneous_accepts = <function 689>,
        tcp_write_queue_size = <function 690>,
        thread_equal = <function 691>,
        thread_join = <function 692>,
        thread_self = <function 693>,
        timer_again = <function 694>,
        timer_get_due_in = <function 695>,
        timer_get_repeat = <function 696>,
        timer_set_repeat = <function 697>,
        timer_start = <function 698>,
        timer_stop = <function 699>,
        translate_sys_error = <function 700>,
        try_write = <function 701>,
        tty_get_vterm_state = <function 702>,
        tty_get_winsize = <function 703>,
        tty_reset_mode = <function 704>,
        tty_set_mode = <function 705>,
        tty_set_vterm_state = <function 706>,
        udp_bind = <function 707>,
        udp_connect = <function 708>,
        udp_get_send_queue_count = <function 709>,
        udp_get_send_queue_size = <function 710>,
        udp_getpeername = <function 711>,
        udp_getsockname = <function 712>,
        udp_open = <function 713>,
        udp_recv_start = <function 714>,
        udp_recv_stop = <function 715>,
        udp_send = <function 716>,
        udp_set_broadcast = <function 717>,
        udp_set_membership = <function 718>,
        udp_set_multicast_interface = <function 719>,
        udp_set_multicast_loop = <function 720>,
        udp_set_multicast_ttl = <function 721>,
        udp_set_source_membership = <function 722>,
        udp_set_ttl = <function 723>,
        udp_try_send = <function 724>,
        unref = <function 725>,
        update_time = <function 726>,
        uptime = <function 727>,
        version = <function 728>,
        version_string = <function 729>,
        walk = <function 730>,
        write = <function 731>,
        write2 = <function 732>
      },
      lsp = <34>{
        _cmd_parts = <function 733>,
        _request_name_to_capability = {
          ["codeLens/resolve"] = "code_lens_resolve",
          ["textDocument/codeAction"] = "code_action",
          ["textDocument/codeLens"] = "code_lens",
          ["textDocument/completion"] = "completion",
          ["textDocument/declaration"] = "declaration",
          ["textDocument/definition"] = "goto_definition",
          ["textDocument/documentHighlight"] = "document_highlight",
          ["textDocument/documentSymbol"] = "document_symbol",
          ["textDocument/formatting"] = "document_formatting",
          ["textDocument/hover"] = "hover",
          ["textDocument/implementation"] = "implementation",
          ["textDocument/prepareCallHierarchy"] = "call_hierarchy",
          ["textDocument/rangeFormatting"] = "document_range_formatting",
          ["textDocument/references"] = "find_references",
          ["textDocument/rename"] = "rename",
          ["textDocument/signatureHelp"] = "signature_help",
          ["textDocument/typeDefinition"] = "type_definition",
          ["workspace/executeCommand"] = "execute_command",
          ["workspace/symbol"] = "workspace_symbol"
        },
        _text_document_did_save_handler = <function 734>,
        _unsupported_method = <function 735>,
        _vim_exit_handler = <function 736>,
        _with_extend = <function 737>,
        buf = <35>{
          add_workspace_folder = <function 738>,
          clear_references = <function 739>,
          code_action = <function 740>,
          completion = <function 741>,
          declaration = <function 742>,
          definition = <function 743>,
          document_highlight = <function 744>,
          document_symbol = <function 745>,
          execute_command = <function 746>,
          formatting = <function 747>,
          formatting_seq_sync = <function 748>,
          formatting_sync = <function 749>,
          hover = <function 750>,
          implementation = <function 751>,
          incoming_calls = <function 752>,
          list_workspace_folders = <function 753>,
          outgoing_calls = <function 754>,
          range_code_action = <function 755>,
          range_formatting = <function 756>,
          references = <function 757>,
          remove_workspace_folder = <function 758>,
          rename = <function 759>,
          server_ready = <function 760>,
          signature_help = <function 761>,
          type_definition = <function 762>,
          workspace_symbol = <function 763>
        },
        buf_attach_client = <function 764>,
        buf_get_clients = <function 765>,
        buf_is_attached = <function 766>,
        buf_notify = <function 767>,
        buf_request = <function 768>,
        buf_request_all = <function 769>,
        buf_request_sync = <function 770>,
        client = <function 771>,
        client_errors = { "INVALID_SERVER_MESSAGE", "INVALID_SERVER_JSON", "NO_RESULT_CALLBACK_FOUND", "READ_ERROR", "NOTIFICATION_HANDLER_ERROR", "SERVER_REQUEST_HANDLER_ERROR", "SERVER_RESULT_CALLBACK_ERROR", "ON_INIT_CALLBACK_ERROR",
          INVALID_SERVER_JSON = 2,
          INVALID_SERVER_MESSAGE = 1,
          NOTIFICATION_HANDLER_ERROR = 5,
          NO_RESULT_CALLBACK_FOUND = 3,
          ON_INIT_CALLBACK_ERROR = 8,
          READ_ERROR = 4,
          SERVER_REQUEST_HANDLER_ERROR = 6,
          SERVER_RESULT_CALLBACK_ERROR = 7
        },
        client_is_stopped = <function 772>,
        codelens = <36>{
          __namespaces = {
            <metatable> = {
              __index = <function 773>
            }
          },
          display = <function 774>,
          get = <function 775>,
          on_codelens = <function 776>,
          refresh = <function 777>,
          run = <function 778>,
          save = <function 779>
        },
        diagnostic = <37>{
          _clear_scheduled_display = <function 780>,
          _define_default_signs_and_highlights = <function 781>,
          _execute_scheduled_display = <function 782>,
          _get_diagnostic_namespace = <function 783>,
          _get_floating_severity_highlight_name = <function 784>,
          _get_severity_highlight_name = <function 785>,
          _get_sign_namespace = <function 786>,
          _schedule_display = <function 787>,
          clear = <function 788>,
          disable = <function 789>,
          display = <function 790>,
          enable = <function 791>,
          get = <function 792>,
          get_all = <function 793>,
          get_count = <function 794>,
          get_line_diagnostics = <function 795>,
          get_next = <function 796>,
          get_next_pos = <function 797>,
          get_prev = <function 798>,
          get_prev_pos = <function 799>,
          get_virtual_text_chunks_for_line = <function 800>,
          goto_next = <function 801>,
          goto_prev = <function 802>,
          insert_leave_auto_cmds = { "InsertLeave", "CursorHoldI" },
          on_publish_diagnostics = <function 803>,
          redraw = <function 804>,
          reset = <function 805>,
          save = <function 806>,
          set_loclist = <function 807>,
          set_qflist = <function 808>,
          set_signs = <function 809>,
          set_underline = <function 810>,
          set_virtual_text = <function 811>,
          show_line_diagnostics = <function 812>
        },
        for_each_buffer_client = <function 813>,
        get_active_clients = <function 814>,
        get_buffers_by_client_id = <function 815>,
        get_client_by_id = <function 816>,
        get_log_path = <function 817>,
        handlers = <38>{
          ["$/progress"] = <function 818>,
          ["callHierarchy/incomingCalls"] = <function 819>,
          ["callHierarchy/outgoingCalls"] = <function 820>,
          ["client/registerCapability"] = <function 821>,
          hover = <function 822>,
          signature_help = <function 823>,
          ["textDocument/codeAction"] = <function 824>,
          ["textDocument/codeLens"] = <function 825>,
          ["textDocument/completion"] = <function 826>,
          ["textDocument/declaration"] = <function 827>,
          ["textDocument/definition"] = <function 828>,
          ["textDocument/documentHighlight"] = <function 829>,
          ["textDocument/documentSymbol"] = <function 830>,
          ["textDocument/formatting"] = <function 831>,
          ["textDocument/hover"] = <function 832>,
          ["textDocument/implementation"] = <function 833>,
          ["textDocument/publishDiagnostics"] = <function 834>,
          ["textDocument/rangeFormatting"] = <function 835>,
          ["textDocument/references"] = <function 836>,
          ["textDocument/rename"] = <function 837>,
          ["textDocument/signatureHelp"] = <function 838>,
          ["textDocument/typeDefinition"] = <function 839>,
          ["window/logMessage"] = <function 840>,
          ["window/showMessage"] = <function 841>,
          ["window/showMessageRequest"] = <function 842>,
          ["window/workDoneProgress/create"] = <function 843>,
          ["workspace/applyEdit"] = <function 844>,
          ["workspace/configuration"] = <function 845>,
          ["workspace/executeCommand"] = <function 846>,
          ["workspace/symbol"] = <function 847>
        },
        log_levels = <39>{ "DEBUG", "INFO", "WARN", "ERROR",
          [0] = "TRACE",
          DEBUG = 1,
          ERROR = 4,
          INFO = 2,
          TRACE = 0,
          WARN = 3
        },
        omnifunc = <function 848>,
        protocol = <40>{
          CodeActionKind = {
            [""] = "Empty",
            Empty = "",
            QuickFix = "quickfix",
            Refactor = "refactor",
            RefactorExtract = "refactor.extract",
            RefactorInline = "refactor.inline",
            RefactorRewrite = "refactor.rewrite",
            Source = "source",
            SourceOrganizeImports = "source.organizeImports",
            quickfix = "QuickFix",
            refactor = "Refactor",
            ["refactor.extract"] = "RefactorExtract",
            ["refactor.inline"] = "RefactorInline",
            ["refactor.rewrite"] = "RefactorRewrite",
            source = "Source",
            ["source.organizeImports"] = "SourceOrganizeImports"
          },
          CompletionItemKind = { " Text", " Method", " Function", " Constructor", "ﰠ Field", " Variable", "ﴯ Class", " Interface", " Module", "ﰠ Property", "塞 Unit", " Value", " Enum", " Keyword", " Snippet", " Color", " File", " Reference", " Folder", " EnumMember", " Constant", "פּ Struct", " Event", " Operator", " TypeParameter",
            Class = 7,
            Color = 16,
            Constant = 21,
            Constructor = 4,
            Enum = 13,
            EnumMember = 20,
            Event = 23,
            Field = 5,
            File = 17,
            Folder = 19,
            Function = 3,
            Interface = 8,
            Keyword = 14,
            Method = 2,
            Module = 9,
            Operator = 24,
            Property = 10,
            Reference = 18,
            Snippet = 15,
            Struct = 22,
            Text = 1,
            TypeParameter = 25,
            Unit = 11,
            Value = 12,
            Variable = 6
          },
          CompletionTriggerKind = { "Invoked", "TriggerCharacter", "TriggerForIncompleteCompletions",
            Invoked = 1,
            TriggerCharacter = 2,
            TriggerForIncompleteCompletions = 3
          },
          DiagnosticSeverity = { "Error", "Warning", "Information", "Hint",
            Error = 1,
            Hint = 4,
            Information = 3,
            Warning = 2
          },
          DiagnosticTag = { "Unnecessary", "Deprecated",
            Deprecated = 2,
            Unnecessary = 1
          },
          DocumentHighlightKind = { "Text", "Read", "Write",
            Read = 2,
            Text = 1,
            Write = 3
          },
          ErrorCodes = {
            [-32801] = "ContentModified",
            [-32800] = "RequestCancelled",
            [-32700] = "ParseError",
            [-32603] = "InternalError",
            [-32602] = "InvalidParams",
            [-32601] = "MethodNotFound",
            [-32600] = "InvalidRequest",
            [-32099] = "serverErrorStart",
            [-32002] = "ServerNotInitialized",
            [-32001] = "UnknownErrorCode",
            [-32000] = "serverErrorEnd",
            ContentModified = -32801,
            InternalError = -32603,
            InvalidParams = -32602,
            InvalidRequest = -32600,
            MethodNotFound = -32601,
            ParseError = -32700,
            RequestCancelled = -32800,
            ServerNotInitialized = -32002,
            UnknownErrorCode = -32001,
            serverErrorEnd = -32000,
            serverErrorStart = -32099
          },
          FailureHandlingKind = {
            Abort = "abort",
            TextOnlyTransactional = "textOnlyTransactional",
            Transactional = "transactional",
            Undo = "undo",
            abort = "Abort",
            textOnlyTransactional = "TextOnlyTransactional",
            transactional = "Transactional",
            undo = "Undo"
          },
          FileChangeType = { "Created", "Changed", "Deleted",
            Changed = 2,
            Created = 1,
            Deleted = 3
          },
          InitializeError = { "unknownProtocolVersion",
            unknownProtocolVersion = 1
          },
          InsertTextFormat = { "PlainText", "Snippet",
            PlainText = 1,
            Snippet = 2
          },
          MarkupKind = {
            Markdown = "markdown",
            PlainText = "plaintext",
            markdown = "Markdown",
            plaintext = "PlainText"
          },
          MessageType = { "Error", "Warning", "Info", "Log",
            Error = 1,
            Info = 3,
            Log = 4,
            Warning = 2
          },
          ResourceOperationKind = {
            Create = "create",
            Delete = "delete",
            Rename = "rename",
            create = "Create",
            delete = "Delete",
            rename = "Rename"
          },
          SymbolKind = { "File", "Module", "Namespace", "Package", "Class", "Method", "Property", "Field", "Constructor", "Enum", "Interface", "Function", "Variable", "Constant", "String", "Number", "Boolean", "Array", "Object", "Key", "Null", "EnumMember", "Struct", "Event", "Operator", "TypeParameter",
            Array = 18,
            Boolean = 17,
            Class = 5,
            Constant = 14,
            Constructor = 9,
            Enum = 10,
            EnumMember = 22,
            Event = 24,
            Field = 8,
            File = 1,
            Function = 12,
            Interface = 11,
            Key = 20,
            Method = 6,
            Module = 2,
            Namespace = 3,
            Null = 21,
            Number = 16,
            Object = 19,
            Operator = 25,
            Package = 4,
            Property = 7,
            String = 15,
            Struct = 23,
            TypeParameter = 26,
            Variable = 13
          },
          TextDocumentSaveReason = { "Manual", "AfterDelay", "FocusOut",
            AfterDelay = 2,
            FocusOut = 3,
            Manual = 1
          },
          TextDocumentSyncKind = { "Full", "Incremental",
            [0] = "None",
            Full = 1,
            Incremental = 2,
            None = 0
          },
          WatchKind = { "Create", "Change",
            [4] = "Delete",
            Change = 2,
            Create = 1,
            Delete = 4
          },
          make_client_capabilities = <function 849>,
          resolve_capabilities = <function 850>
        },
        rpc = <41>{
          client_errors = { "INVALID_SERVER_MESSAGE", "INVALID_SERVER_JSON", "NO_RESULT_CALLBACK_FOUND", "READ_ERROR", "NOTIFICATION_HANDLER_ERROR", "SERVER_REQUEST_HANDLER_ERROR", "SERVER_RESULT_CALLBACK_ERROR",
            INVALID_SERVER_JSON = 2,
            INVALID_SERVER_MESSAGE = 1,
            NOTIFICATION_HANDLER_ERROR = 5,
            NO_RESULT_CALLBACK_FOUND = 3,
            READ_ERROR = 4,
            SERVER_REQUEST_HANDLER_ERROR = 6,
            SERVER_RESULT_CALLBACK_ERROR = 7
          },
          format_rpc_error = <function 851>,
          rpc_response_error = <function 852>,
          start = <function 853>
        },
        rpc_response_error = <function 852>,
        set_log_level = <function 854>,
        start_client = <function 855>,
        stop_client = <function 856>,
        util = <42>{
          _get_completion_item_kind_name = <function 857>,
          _get_line_byte_from_position = <function 858>,
          _get_symbol_kind_name = <function 859>,
          _make_floating_popup_size = <function 860>,
          _trim = <function 861>,
          _warn_once = <function 862>,
          apply_text_document_edit = <function 863>,
          apply_text_edits = <function 864>,
          apply_workspace_edit = <function 865>,
          buf_clear_references = <function 866>,
          buf_highlight_references = <function 867>,
          buf_versions = { 0,
            [4] = 33,
            [10] = 18
          },
          character_offset = <function 868>,
          close_preview_autocmd = <function 869>,
          compute_diff = <function 870>,
          convert_input_to_markdown_lines = <function 871>,
          convert_signature_help_to_markdown_lines = <function 872>,
          diagnostics_to_items = <function 873>,
          extract_completion_items = <function 874>,
          get_effective_tabstop = <function 875>,
          get_line = <function 876>,
          get_lines = <function 877>,
          get_progress_messages = <function 878>,
          jump_to_location = <function 879>,
          locations_to_items = <function 880>,
          lookup_section = <function 881>,
          make_floating_popup_options = <function 882>,
          make_formatting_params = <function 883>,
          make_given_range_params = <function 884>,
          make_position_params = <function 885>,
          make_range_params = <function 886>,
          make_text_document_params = <function 887>,
          make_workspace_params = <function 888>,
          open_floating_preview = <function 889>,
          parse_snippet = <function 890>,
          preview_location = <function 891>,
          rename = <function 892>,
          set_lines = <function 893>,
          set_loclist = <function 894>,
          set_qflist = <function 895>,
          stylize_markdown = <function 896>,
          symbols_to_items = <function 897>,
          text_document_completion_list_to_complete_items = <function 898>,
          trim_empty_lines = <function 899>,
          try_trim_markdown_code_blocks = <function 900>
        },
        with = <function 901>
      },
      notify = <function 902>,
      o = {
        <metatable> = {
          __index = <function 903>,
          __newindex = <function 904>
        }
      },
      opt = {
        <metatable> = {
          __index = <function 905>,
          __newindex = <function 906>
        }
      },
      opt_global = {
        <metatable> = {
          __index = <function 907>,
          __newindex = <function 908>
        }
      },
      opt_local = {
        <metatable> = {
          __index = <function 909>,
          __newindex = <function 910>
        }
      },
      paste = <function 911>,
      pesc = <function 912>,
      regex = <function 913>,
      region = <function 914>,
      register_keystroke_callback = <function 915>,
      rpcnotify = <function 916>,
      rpcrequest = <function 917>,
      schedule = <function 918>,
      schedule_wrap = <function 919>,
      split = <function 920>,
      startswith = <function 921>,
      str_byteindex = <function 922>,
      str_utfindex = <function 923>,
      stricmp = <function 924>,
      t = {
        <metatable> = {
          __index = <function 925>,
          __newindex = <function 926>
        }
      },
      tbl_add_reverse_lookup = <function 927>,
      tbl_contains = <function 928>,
      tbl_count = <function 929>,
      tbl_deep_extend = <function 930>,
      tbl_extend = <function 931>,
      tbl_filter = <function 932>,
      tbl_flatten = <function 933>,
      tbl_isempty = <function 934>,
      tbl_islist = <function 935>,
      tbl_keys = <function 936>,
      tbl_map = <function 937>,
      tbl_values = <function 938>,
      treesitter = <43>{
        _create_parser = <function 939>,
        add_directive = <function 940>,
        add_predicate = <function 941>,
        get_node_text = <function 942>,
        get_parser = <function 943>,
        get_query = <function 944>,
        get_query_files = <function 945>,
        get_string_parser = <function 946>,
        highlighter = <44>{
          __index = <table 44>,
          _on_buf = <function 947>,
          _on_line = <function 948>,
          _on_win = <function 949>,
          active = { {
              _highlight_states = {
                [<userdata 4>] = {
                  iter = <function 950>,
                  next_row = 14
                }
              },
              _queries = {
                lua = {
                  _query = {
                    captures = <45>{ "variable.builtin", "conditional", "repeat", "keyword", "keyword.return", "keyword.operator", "operator", "punctuation.delimiter", "punctuation.bracket", "variable", "boolean", "constant.builtin", "constant", "function", "keyword.function", "property", "method", "parameter", "constructor", "comment", "string", "number", "label", "field", "error" },
                    info = {
                      captures = <table 45>,
                      patterns = {
                        [19] = { { "match?", 13, "^[A-Z][A-Z_0-9]*$" } }
                      }
                    },
                    query = <userdata 5>,
                    <metatable> = <46>{
                      __index = <table 46>,
                      apply_directives = <function 951>,
                      iter_captures = <function 952>,
                      iter_matches = <function 953>,
                      match_preds = <function 954>
                    }
                  },
                  hl_cache = {
                    [4] = "luaTSKeyword",
                    [5] = "luaTSKeywordReturn",
                    [7] = "luaTSOperator",
                    [8] = "luaTSPunctDelimiter",
                    [9] = "luaTSPunctBracket",
                    [10] = "luaTSVariable",
                    [14] = "luaTSFunction",
                    [16] = "luaTSProperty",
                    [19] = "luaTSConstructor",
                    [21] = "luaTSString",
                    [24] = "luaTSField",
                    <metatable> = {
                      __index = <function 955>
                    }
                  },
                  <metatable> = {
                    __index = <47>{
                      __index = <table 47>,
                      _get_hl_from_capture = <function 956>,
                      new = <function 957>,
                      query = <function 958>
                    }
                  }
                }
              },
              bufnr = 1,
              edit_count = 0,
              line_count = {},
              redraw_count = 29,
              tree = {
                _callbacks = {
                  bytes = { <function 959> },
                  changedtree = { <function 960> },
                  child_added = {},
                  child_removed = {},
                  detach = { <function 961> }
                },
                _children = {},
                _injection_query = {
                  captures = <48>{ "_cdef_identifier", "c", "comment" },
                  info = {
                    captures = <table 48>,
                    patterns = { { { "eq?", 1, "cdef" } } }
                  },
                  query = <userdata 6>,
                  <metatable> = <table 46>
                },
                _lang = "lua",
                _opts = {},
                _parser = <userdata 7>,
                _regions = {},
                _source = 1,
                _trees = { <userdata 4> },
                _valid = true,
                <metatable> = <49>{
                  __index = <table 49>,
                  _do_callback = <function 962>,
                  _get_injections = <function 963>,
                  _on_bytes = <function 964>,
                  _on_detach = <function 965>,
                  _on_reload = <function 966>,
                  add_child = <function 967>,
                  children = <function 968>,
                  contains = <function 969>,
                  destroy = <function 970>,
                  for_each_child = <function 971>,
                  for_each_tree = <function 972>,
                  included_regions = <function 973>,
                  invalidate = <function 974>,
                  is_valid = <function 975>,
                  lang = <function 976>,
                  language_for_range = <function 977>,
                  new = <function 978>,
                  parse = <function 979>,
                  register_cbs = <function 980>,
                  remove_child = <function 981>,
                  set_included_regions = <function 982>,
                  source = <function 983>,
                  trees = <function 984>
                }
              },
              <metatable> = <table 44>
            },
            [4] = {
              _highlight_states = {
                [<userdata 8>] = {
                  iter = <function 985>,
                  next_row = 0
                },
                [<userdata 9>] = {
                  iter = <function 986>,
                  next_row = 0
                },
                [<userdata 10>] = {
                  iter = <function 987>,
                  next_row = 16
                }
              },
              _queries = {
                comment = {
                  _query = {
                    captures = <50>{ "punctuation.bracket", "punctuation.delimiter", "text.note", "constant", "text.warning", "text.danger", "number" },
                    info = {
                      captures = <table 50>,
                      patterns = {
                        [4] = { { "any-of?", 5, "TODO", "HACK", "WARNING" } },
                        [5] = { { "any-of?", 5, "TODO", "HACK", "WARNING",
                            string_set = {
                              HACK = true,
                              TODO = true,
                              WARNING = true
                            }
                          } },
                        [6] = { { "any-of?", 6, "FIXME", "XXX", "BUG" } },
                        [7] = { { "any-of?", 6, "FIXME", "XXX", "BUG",
                            string_set = {
                              BUG = true,
                              FIXME = true,
                              XXX = true
                            }
                          } },
                        [8] = { { "match?", 7, "^#[0-9]+$" } },
                        [9] = { { "match?", 4, "^[@][a-zA-Z0-9_-]+$" } }
                      }
                    },
                    query = <userdata 11>,
                    <metatable> = <table 46>
                  },
                  hl_cache = {
                    <metatable> = {
                      __index = <function 988>
                    }
                  },
                  <metatable> = {
                    __index = <table 47>
                  }
                },
                lua = {
                  _query = {
                    captures = <51>{ "variable.builtin", "conditional", "repeat", "keyword", "keyword.return", "keyword.operator", "operator", "punctuation.delimiter", "punctuation.bracket", "variable", "boolean", "constant.builtin", "constant", "function", "keyword.function", "property", "method", "parameter", "constructor", "comment", "string", "number", "label", "field", "error" },
                    info = {
                      captures = <table 51>,
                      patterns = {
                        [19] = { { "match?", 13, "^[A-Z][A-Z_0-9]*$" } }
                      }
                    },
                    query = <userdata 12>,
                    <metatable> = <table 46>
                  },
                  hl_cache = {
                    [2] = "luaTSConditional",
                    [4] = "luaTSKeyword",
                    [5] = "luaTSKeywordReturn",
                    [6] = "luaTSKeywordOperator",
                    [7] = "luaTSOperator",
                    [8] = "luaTSPunctDelimiter",
                    [9] = "luaTSPunctBracket",
                    [10] = "luaTSVariable",
                    [14] = "luaTSFunction",
                    [16] = "luaTSProperty",
                    [20] = "luaTSComment",
                    [21] = "luaTSString",
                    <metatable> = {
                      __index = <function 989>
                    }
                  },
                  <metatable> = {
                    __index = <table 47>
                  }
                }
              },
              bufnr = 4,
              edit_count = 0,
              line_count = {},
              redraw_count = 83,
              tree = {
                _callbacks = {
                  bytes = { <function 990> },
                  changedtree = { <function 991> },
                  child_added = {},
                  child_removed = {},
                  detach = { <function 992> }
                },
                _children = {
                  comment = {
                    _callbacks = {
                      bytes = {},
                      changedtree = {},
                      child_added = {},
                      child_removed = {},
                      detach = {}
                    },
                    _children = {},
                    _lang = "comment",
                    _opts = <52>{},
                    _parser = <userdata 13>,
                    _regions = { { <userdata 14> }, { <userdata 15> } },
                    _source = 4,
                    _trees = { <userdata 9>, <userdata 8> },
                    _valid = true,
                    <metatable> = <table 49>
                  }
                },
                _injection_query = {
                  captures = <53>{ "_cdef_identifier", "c", "comment" },
                  info = {
                    captures = <table 53>,
                    patterns = { { { "eq?", 1, "cdef" } } }
                  },
                  query = <userdata 16>,
                  <metatable> = <table 46>
                },
                _lang = "lua",
                _opts = <table 52>,
                _parser = <userdata 17>,
                _regions = {},
                _source = 4,
                _trees = { <userdata 10> },
                _valid = true,
                <metatable> = <table 49>
              },
              <metatable> = <table 44>
            },
            [10] = {
              _highlight_states = {
                [<userdata 18>] = {
                  iter = <function 993>,
                  next_row = 10
                }
              },
              _queries = {
                lua = {
                  _query = {
                    captures = <54>{ "variable.builtin", "conditional", "repeat", "keyword", "keyword.return", "keyword.operator", "operator", "punctuation.delimiter", "punctuation.bracket", "variable", "boolean", "constant.builtin", "constant", "function", "keyword.function", "property", "method", "parameter", "constructor", "comment", "string", "number", "label", "field", "error" },
                    info = {
                      captures = <table 54>,
                      patterns = {
                        [19] = { { "match?", 13, "^[A-Z][A-Z_0-9]*$" } }
                      }
                    },
                    query = <userdata 19>,
                    <metatable> = <table 46>
                  },
                  hl_cache = {
                    [2] = "luaTSConditional",
                    [3] = "luaTSRepeat",
                    [4] = "luaTSKeyword",
                    [7] = "luaTSOperator",
                    [8] = "luaTSPunctDelimiter",
                    [9] = "luaTSPunctBracket",
                    [10] = "luaTSVariable",
                    [12] = "luaTSConstBuiltin",
                    [14] = "luaTSFunction",
                    [16] = "luaTSProperty",
                    [21] = "luaTSString",
                    <metatable> = {
                      __index = <function 994>
                    }
                  },
                  <metatable> = {
                    __index = <table 47>
                  }
                }
              },
              bufnr = 10,
              edit_count = 0,
              line_count = {},
              redraw_count = 100,
              tree = {
                _callbacks = {
                  bytes = { <function 995> },
                  changedtree = { <function 996> },
                  child_added = {},
                  child_removed = {},
                  detach = { <function 997> }
                },
                _children = {},
                _injection_query = {
                  captures = <55>{ "_cdef_identifier", "c", "comment" },
                  info = {
                    captures = <table 55>,
                    patterns = { { { "eq?", 1, "cdef" } } }
                  },
                  query = <userdata 20>,
                  <metatable> = <table 46>
                },
                _lang = "lua",
                _opts = {},
                _parser = <userdata 21>,
                _regions = {},
                _source = 10,
                _trees = { <userdata 18> },
                _valid = true,
                <metatable> = <table 49>
              },
              <metatable> = <table 44>
            }
          },
          destroy = <function 998>,
          get_highlight_state = <function 999>,
          get_query = <function 1000>,
          hl_map = {
            annotation = "TSAnnotation",
            attribute = "TSAttribute",
            boolean = "TSBoolean",
            character = "TSCharacter",
            comment = "TSComment",
            conditional = "TSConditional",
            constant = "TSConstant",
            ["constant.builtin"] = "TSConstBuiltin",
            ["constant.macro"] = "TSConstMacro",
            constructor = "TSConstructor",
            error = "TSError",
            exception = "TSException",
            field = "TSField",
            float = "TSFloat",
            function = "TSFunction",
            ["function.builtin"] = "TSFuncBuiltin",
            ["function.macro"] = "TSFuncMacro",
            ["function.special"] = "Function",
            include = "TSInclude",
            keyword = "TSKeyword",
            ["keyword.function"] = "TSKeywordFunction",
            ["keyword.operator"] = "TSKeywordOperator",
            ["keyword.return"] = "TSKeywordReturn",
            label = "TSLabel",
            method = "TSMethod",
            namespace = "TSNamespace",
            none = "TSNone",
            number = "TSNumber",
            operator = "TSOperator",
            parameter = "TSParameter",
            ["parameter.reference"] = "TSParameterReference",
            property = "TSProperty",
            ["punctuation.bracket"] = "TSPunctBracket",
            ["punctuation.delimiter"] = "TSPunctDelimiter",
            ["punctuation.special"] = "TSPunctSpecial",
            repeat = "TSRepeat",
            string = "TSString",
            ["string.escape"] = "TSStringEscape",
            ["string.regex"] = "TSStringRegex",
            ["string.special"] = "TSStringSpecial",
            structure = "Structure",
            symbol = "TSSymbol",
            tag = "TSTag",
            ["tag.attribute"] = "TSTagAttribute",
            ["tag.delimiter"] = "TSTagDelimiter",
            text = "TSText",
            ["text.danger"] = "TSDanger",
            ["text.emphasis"] = "TSEmphasis",
            ["text.environment"] = "TSEnvironment",
            ["text.environment.name"] = "TSEnvironmentName",
            ["text.literal"] = "TSLiteral",
            ["text.math"] = "TSMath",
            ["text.note"] = "TSNote",
            ["text.reference"] = "TSTextReference",
            ["text.strike"] = "TSStrike",
            ["text.strong"] = "TSStrong",
            ["text.title"] = "TSTitle",
            ["text.underline"] = "TSUnderline",
            ["text.uri"] = "TSURI",
            ["text.warning"] = "TSWarning",
            type = "TSType",
            ["type.builtin"] = "TSTypeBuiltin",
            variable = "TSVariable",
            ["variable.builtin"] = "TSVariableBuiltin"
          },
          new = <function 1001>,
          on_bytes = <function 1002>,
          on_changedtree = <function 1003>,
          on_detach = <function 1004>,
          reset_highlight_state = <function 1005>
        },
        inspect_language = <function 1006>,
        language_version = 13,
        list_directives = <function 1007>,
        list_predicates = <function 1008>,
        parse_query = <function 1009>,
        require_language = <function 1010>,
        set_query = <function 1011>,
        <metatable> = {
          __index = <function 1012>
        }
      },
      trim = <function 1013>,
      type_idx = true,
      types = {
        [3] = "float",
        [5] = "array",
        [6] = "dictionary",
        array = 5,
        dictionary = 6,
        float = 3
      },
      uri_from_bufnr = <function 1014>,
      uri_from_fname = <function 1015>,
      uri_to_bufnr = <function 1016>,
      v = {
        <metatable> = {
          __index = <function 1017>,
          __newindex = <function 1018>
        }
      },
      val_idx = false,
      validate = <function 1019>,
      version = <function 1020>,
      w = {
        <metatable> = {
          __index = <function 1021>,
          __newindex = <function 1022>
        }
      },
      wait = <function 1023>,
      wo = {
        <metatable> = {
          __index = <function 1024>,
          __newindex = <function 1025>
        }
      },
      <metatable> = {
        __index = <function 1026>
      }
    },
    xpcall = <function 1027>
  },
  bit = <table 16>,
  bufferline = {
    __apply_colors = <function 1028>,
    __load = <function 1029>,
    close_buffer_with_pick = <function 1030>,
    close_in_direction = <function 1031>,
    cycle = <function 1032>,
    go_to_buffer = <function 1033>,
    handle_click = <function 1034>,
    handle_close_buffer = <function 1035>,
    handle_win_click = <function 1036>,
    move = <function 1037>,
    pick_buffer = <function 1038>,
    restore_positions = <function 1039>,
    setup = <function 1040>,
    sort_buffers_by = <function 1041>,
    toggle_bufferline = <function 1042>
  },
  ["bufferline.buffers"] = {
    Buffer = <56>{
      __index = <table 56>,
      ancestor = <function 1043>,
      current = <function 1044>,
      new = <function 1045>,
      visible = <function 1046>
    },
    Buffers = <57>{
      __add = <function 1047>,
      __index = <table 57>,
      add = <function 1048>,
      drop = <function 1049>,
      new = <function 1050>
    }
  },
  ["bufferline.colors"] = {
    color_is_bright = <function 1051>,
    get_hex = <function 1052>,
    shade_color = <function 1053>
  },
  ["bufferline.config"] = {
    __reset = <function 1054>,
    apply = <function 1055>,
    get = <function 1056>,
    set = <function 1057>,
    update_highlights = <function 1058>
  },
  ["bufferline.constants"] = {
    padding = " ",
    positions_key = "BufferlinePositions",
    sep_chars = {
      padded_slant = { " ", " " },
      slant = { "", "" },
      thick = { "▌", "▐" },
      thin = { "▏", "▕" }
    },
    sep_names = {
      padded_slant = "padded_slant",
      slant = "slant",
      thick = "thick",
      thin = "thin"
    }
  },
  ["bufferline.custom_area"] = {
    get = <function 1059>
  },
  ["bufferline.diagnostics"] = {
    component = <function 1060>,
    get = <function 1061>
  },
  ["bufferline.duplicates"] = {
    component = <function 1062>,
    mark = <function 1063>,
    reset = <function 1064>
  },
  ["bufferline.highlights"] = {
    hl = <function 1065>,
    hl_exists = <function 1066>,
    set_all = <function 1067>,
    set_one = <function 1068>
  },
  ["bufferline.letters"] = {
    current = {
      g = 1,
      i = 10,
      o = 17,
      t = 4
    },
    get = <function 1069>,
    reset = <function 1070>,
    valid = "abcdefghijklmopqrstuvwxyzABCDEFGHIJKLMOPQRSTUVWXYZ"
  },
  ["bufferline.numbers"] = {
    component = <function 1071>
  },
  ["bufferline.offset"] = {
    get = <function 1072>
  },
  ["bufferline.sorters"] = {
    sort_buffers = <function 1073>
  },
  ["bufferline.tabs"] = {
    get = <function 1074>
  },
  ["bufferline.utils"] = {
    array_concat = <function 1075>,
    augroup = <function 1076>,
    echoerr = <function 1077>,
    echomsg = <function 1078>,
    filter_duplicates = <function 1079>,
    get_valid_buffers = <function 1080>,
    is_test = <function 1081>,
    is_valid = <function 1082>,
    join = <function 1083>,
    make_clickable = <function 1084>,
    path_sep = "/",
    tbl_reverse_lookup = <function 1085>
  },
  ["bufferline/constants"] = {
    padding = " ",
    positions_key = "BufferlinePositions",
    sep_chars = {
      padded_slant = { " ", " " },
      slant = { "", "" },
      thick = { "▌", "▐" },
      thin = { "▏", "▕" }
    },
    sep_names = {
      padded_slant = "padded_slant",
      slant = "slant",
      thick = "thick",
      thin = "thin"
    }
  },
  ["bufferline/utils"] = {
    array_concat = <function 1086>,
    augroup = <function 1087>,
    echoerr = <function 1088>,
    echomsg = <function 1089>,
    filter_duplicates = <function 1090>,
    get_valid_buffers = <function 1091>,
    is_test = <function 1092>,
    is_valid = <function 1093>,
    join = <function 1094>,
    make_clickable = <function 1095>,
    path_sep = "/",
    tbl_reverse_lookup = <function 1096>
  },
  coq = <table 17>,
  coroutine = <table 18>,
  debug = <table 19>,
  ffi = {
    C = <userdata 22>,
    abi = <function 1097>,
    alignof = <function 1098>,
    arch = "x64",
    cast = <function 1099>,
    cdef = <function 1100>,
    copy = <function 1101>,
    errno = <function 1102>,
    fill = <function 1103>,
    gc = <function 1104>,
    istype = <function 1105>,
    load = <function 1106>,
    metatype = <function 1107>,
    new = <function 1108>,
    offsetof = <function 1109>,
    os = "Linux",
    sizeof = <function 1110>,
    string = <function 1111>,
    typeof = <function 1112>
  },
  fzf = {
    default_options = {},
    default_window_options = {
      border = true,
      col = 27,
      height = 50,
      row = 2,
      width = 216,
      window_on_create = <function 1113>
    },
    fzf = <function 1114>,
    fzf_relative = <function 1115>,
    provided_win_fzf = <function 1116>,
    raw_fzf = <function 1117>
  },
  ["fzf-lua"] = {
    btags = <function 1118>,
    buffers = <function 1119>,
    builtin = <function 1120>,
    colorschemes = <function 1121>,
    command_history = <function 1122>,
    commands = <function 1123>,
    files = <function 1124>,
    fzf_files = <function 1125>,
    git_bcommits = <function 1126>,
    git_branches = <function 1127>,
    git_commits = <function 1128>,
    git_files = <function 1129>,
    git_status = <function 1130>,
    grep = <function 1131>,
    grep_cWORD = <function 1132>,
    grep_curbuf = <function 1133>,
    grep_cword = <function 1134>,
    grep_last = <function 1135>,
    grep_visual = <function 1136>,
    help_tags = <function 1137>,
    keymaps = <function 1138>,
    live_grep = <function 1139>,
    loclist = <function 1140>,
    lsp_code_actions = <function 1141>,
    lsp_declarations = <function 1142>,
    lsp_definitions = <function 1143>,
    lsp_document_diagnostics = <function 1144>,
    lsp_document_symbols = <function 1145>,
    lsp_implementations = <function 1146>,
    lsp_live_workspace_symbols = <function 1147>,
    lsp_references = <function 1148>,
    lsp_typedefs = <function 1149>,
    lsp_workspace_diagnostics = <function 1150>,
    lsp_workspace_symbols = <function 1151>,
    man_pages = <function 1152>,
    marks = <function 1153>,
    oldfiles = <function 1154>,
    quickfix = <function 1155>,
    registers = <function 1156>,
    search_history = <function 1157>,
    setup = <function 1158>,
    spell_suggest = <function 1159>,
    tags = <function 1160>
  },
  ["fzf-lua.actions"] = {
    act = <function 1161>,
    buf_del = <function 1162>,
    buf_edit = <function 1163>,
    buf_split = <function 1164>,
    buf_tabedit = <function 1165>,
    buf_vsplit = <function 1166>,
    colorscheme = <function 1167>,
    ex_run = <function 1168>,
    expect = <function 1169>,
    file_edit = <function 1170>,
    file_open_in_background = <function 1171>,
    file_sel_to_qf = <function 1172>,
    file_split = <function 1173>,
    file_tabedit = <function 1174>,
    file_vsplit = <function 1175>,
    git_switch = <function 1176>,
    goto_mark = <function 1177>,
    help = <function 1178>,
    help_tab = <function 1179>,
    help_vert = <function 1180>,
    man = <function 1181>,
    man_tab = <function 1182>,
    man_vert = <function 1183>,
    run_builtin = <function 1184>,
    search = <function 1185>,
    spell_apply = <function 1186>,
    vimcmd = <function 1187>,
    vimcmd_file = <function 1188>
  },
  ["fzf-lua.cmd"] = {
    load_command = <function 1189>
  },
  ["fzf-lua.config"] = {
    _devicons = <58>{
      get_icon = <function 1190>,
      get_icons = <function 1191>,
      has_loaded = <function 1192>,
      set_up_highlights = <function 1193>,
      setup = <function 1194>
    },
    _has_devicons = true,
    globals = {
      btags = {
        actions = {
          ["ctrl-q"] = <function 1172>,
          ["ctrl-s"] = <function 1173>,
          ["ctrl-t"] = <function 1174>,
          ["ctrl-v"] = <function 1175>,
          default = <function 1170>
        },
        color_icons = true,
        ctags_file = "tags",
        file_icons = true,
        git_icons = true,
        prompt = "BTags> "
      },
      buffers = {
        actions = {
          ["ctrl-s"] = <function 1164>,
          ["ctrl-t"] = <function 1165>,
          ["ctrl-v"] = <function 1166>,
          ["ctrl-x"] = <function 1162>,
          default = <function 1163>
        },
        color_icons = true,
        cwd_only = false,
        file_icons = true,
        ignore_current_buffer = false,
        prompt = "Buffers> ",
        show_all_buffers = true,
        sort_lastused = true
      },
      builtin = {
        actions = {
          default = <function 1184>
        },
        prompt = "Builtin> ",
        winopts = {
          win_height = 0.65,
          win_width = 0.5
        }
      },
      colorschemes = {
        actions = {
          default = <function 1167>
        },
        live_preview = true,
        prompt = "Colorschemes> ",
        winopts = {
          win_height = 0.55,
          win_width = 0.5
        }
      },
      default_previewer = "bat",
      default_prompt = "> ",
      file_icon_colors = {
        bash = "cyan",
        build = "red",
        c = "blue",
        conf = "yellow",
        cpp = "blue",
        css = "magenta",
        desktop = "magenta",
        gif = "green",
        h = "magenta",
        hpp = "magenta",
        jpg = "green",
        js = "blue",
        json = "yellow",
        lua = "blue",
        md = "yellow",
        png = "green",
        py = "green",
        sh = "cyan",
        sol = "red",
        svg = "green",
        toml = "yellow",
        ts = "cyan",
        tsx = "cyan",
        txt = "white",
        vim = "green",
        yaml = "yellow",
        yml = "yellow",
        zsh = "cyan"
      },
      files = {
        actions = <59>{
          ["ctrl-q"] = <function 1172>,
          ["ctrl-s"] = <function 1173>,
          ["ctrl-t"] = <function 1174>,
          ["ctrl-v"] = <function 1175>,
          default = <function 1170>
        },
        cmd = "rg --hidden --follow --no-ignore --files -g '!.git/' -g '!node_modules/' -g '!target/' .",
        color_icons = true,
        fd_opts = "--color never --type f --hidden --follow --exclude .git --exclude node_modules --exclude '*.pyc'",
        file_icons = true,
        find_opts = "-type f -printf '%P\n'",
        git_diff_cmd = "git diff --name-status --relative HEAD",
        git_icons = true,
        git_untracked_cmd = "git ls-files --exclude-standard --others",
        prompt = "Files > "
      },
      flip_columns = 120,
      fzf_binds = { "f2:toggle-preview", "f3:toggle-preview-wrap", "shift-down:preview-page-down", "shift-up:preview-page-up", "ctrl-d:half-page-down", "ctrl-u:half-page-up", "ctrl-f:page-down", "ctrl-b:page-up", "ctrl-a:toggle-all", "ctrl-l:clear-query" },
      fzf_layout = "default",
      git = {
        bcommits = {
          actions = {},
          cmd = "git log --pretty=oneline --abbrev-commit --color --",
          preview = "git show --pretty='%Cred%H%n%Cblue%an%n%Cgreen%s' --color {1}",
          prompt = "BCommits> "
        },
        branches = {
          actions = {
            default = <function 1176>
          },
          cmd = "git branch --all --color",
          preview = "git log --graph --pretty=oneline --abbrev-commit --color {1}",
          prompt = "Branches> "
        },
        commits = {
          actions = {},
          cmd = "git log --pretty=oneline --abbrev-commit --color",
          preview = "git show --pretty='%Cred%H%n%Cblue%an%n%Cgreen%s' --color {1}",
          prompt = "Commits> "
        },
        files = {
          actions = <table 59>,
          cmd = "git ls-files --exclude-standard",
          color_icons = true,
          file_icons = true,
          git_icons = true,
          prompt = "GitFiles> "
        },
        icons = {
          ["?"] = {
            color = "magenta",
            icon = "?"
          },
          A = {
            color = "green",
            icon = "A"
          },
          D = {
            color = "red",
            icon = "D"
          },
          M = {
            color = "yellow",
            icon = "M"
          }
        },
        status = {
          actions = <table 59>,
          cmd = "git status -s",
          color_icons = true,
          file_icons = true,
          git_icons = true,
          previewer = "git_diff",
          prompt = "GitStatus> "
        }
      },
      grep = {
        actions = {
          ["ctrl-q"] = <function 1172>,
          ["ctrl-s"] = <function 1173>,
          ["ctrl-t"] = <function 1174>,
          ["ctrl-v"] = <function 1175>,
          ["ctrl-y"] = <function 1195>,
          default = <function 1170>
        },
        color_icons = true,
        file_icons = true,
        git_diff_cmd = "git diff --name-status --relative HEAD",
        git_icons = true,
        git_untracked_cmd = "git ls-files --exclude-standard --others",
        grep_opts = "--line-number --recursive --color=auto",
        input_prompt = "Grep for > ",
        prompt = "Livegrep RG > ",
        rg_opts = "--hidden --follow --no-ignore --color=always --line-number --smart-case --no-heading --column -g '!.git/' -g '!node_modules/' -g '!target/'"
      },
      helptags = {
        actions = {
          ["ctrl-s"] = <function 1178>,
          ["ctrl-t"] = <function 1179>,
          ["ctrl-v"] = <function 1180>,
          default = <function 1178>
        },
        prompt = "Help> "
      },
      loclist = {
        actions = {
          ["ctrl-q"] = <function 1172>,
          ["ctrl-s"] = <function 1173>,
          ["ctrl-t"] = <function 1174>,
          ["ctrl-v"] = <function 1175>,
          default = <function 1170>
        },
        color_icons = true,
        file_icons = true,
        git_diff_cmd = "git diff --name-status --relative HEAD",
        git_icons = false,
        git_untracked_cmd = "git ls-files --exclude-standard --others",
        prompt = "Locations> ",
        separator = "▏"
      },
      lsp = {
        actions = <table 59>,
        async_or_timeout = true,
        color_icons = true,
        cwd_only = false,
        file_icons = true,
        git_icons = false,
        icons = {
          Error = {
            color = "red",
            icon = ""
          },
          Hint = {
            color = "magenta",
            icon = ""
          },
          Information = {
            color = "blue",
            icon = ""
          },
          Warning = {
            color = "yellow",
            icon = ""
          }
        },
        lsp_icons = true,
        prompt = "> ",
        severity = "hint"
      },
      manpages = {
        actions = {
          ["ctrl-s"] = <function 1181>,
          ["ctrl-t"] = <function 1182>,
          ["ctrl-v"] = <function 1183>,
          default = <function 1181>
        },
        cmd = "man -k .",
        prompt = "Man> "
      },
      nvim = {
        command_history = {
          actions = {
            default = <function 1168>
          },
          prompt = "Command History> "
        },
        commands = {
          actions = {
            default = <function 1168>
          },
          prompt = "Commands> "
        },
        keymaps = {
          prompt = "Keymaps> "
        },
        marks = {
          actions = {
            default = <function 1177>
          },
          prompt = "Marks> "
        },
        registers = {
          ignore_empty = true,
          prompt = "Registers> "
        },
        search_history = {
          actions = {
            default = <function 1185>
          },
          prompt = "Search History> "
        },
        spell_suggest = {
          actions = {
            default = <function 1186>
          },
          prompt = "Spelling Suggestions> "
        }
      },
      oldfiles = {
        actions = {
          ["ctrl-q"] = <function 1172>,
          ["ctrl-s"] = <function 1173>,
          ["ctrl-t"] = <function 1174>,
          ["ctrl-v"] = <function 1175>,
          default = <function 1170>
        },
        color_icons = true,
        file_icons = true,
        git_diff_cmd = "git diff --name-status --relative HEAD",
        git_icons = false,
        git_untracked_cmd = "git ls-files --exclude-standard --others",
        prompt = "History> "
      },
      preview_border = "border",
      preview_horizontal = "right:60%",
      preview_layout = "flex",
      preview_opts = "nohidden",
      preview_vertical = "down:45%",
      preview_wrap = "nowrap",
      previewers = {
        bat = {
          _new = <function 1196>,
          args = "--style=numbers,changes --color always",
          cmd = "bat",
          theme = "base16"
        },
        bat_native = {
          _new = <function 1197>,
          args = "--italic-text=always --style=numbers,changes --color always",
          cmd = "bat"
        },
        builtin = {
          _new = <function 1198>,
          treesitter = true
        },
        cat = {
          _new = <function 1199>,
          args = "--number",
          cmd = "cat"
        },
        cmd = {
          _new = <function 1200>,
          args = "",
          cmd = ""
        },
        git_diff = {
          _new = <function 1201>,
          args = "--color",
          cmd = "git diff"
        },
        head = {
          _new = <function 1202>,
          cmd = "head"
        }
      },
      quickfix = {
        actions = {
          ["ctrl-q"] = <function 1172>,
          ["ctrl-s"] = <function 1173>,
          ["ctrl-t"] = <function 1174>,
          ["ctrl-v"] = <function 1175>,
          default = <function 1170>
        },
        color_icons = true,
        file_icons = true,
        git_diff_cmd = "git diff --name-status --relative HEAD",
        git_icons = false,
        git_untracked_cmd = "git ls-files --exclude-standard --others",
        prompt = "Quickfix> ",
        separator = "▏"
      },
      tags = {
        actions = {
          ["ctrl-q"] = <function 1172>,
          ["ctrl-s"] = <function 1173>,
          ["ctrl-t"] = <function 1174>,
          ["ctrl-v"] = <function 1175>,
          default = <function 1170>
        },
        color_icons = true,
        ctags_file = "tags",
        file_icons = true,
        git_icons = true,
        prompt = "Tags> "
      },
      winopts = {
        win_border = true,
        win_col = 0.5,
        win_height = 0.85,
        win_row = 0.3,
        win_width = 0.8,
        window_on_create = <function 1113>
      }
    },
    normalize_opts = <function 1203>,
    preview_window = <function 1204>,
    winopts = <function 1205>
  },
  ["fzf-lua.core"] = {
    build_fzf_cli = <function 1206>,
    fzf = <function 1207>,
    fzf_files = <function 1125>,
    get_devicon = <function 1208>,
    make_entry_file = <function 1209>,
    make_entry_lcol = <function 1210>,
    set_fzf_line_args = <function 1211>
  },
  ["fzf-lua.path"] = {
    add_trailing = <function 1212>,
    basename = <function 1213>,
    entry_to_file = <function 1214>,
    extension = <function 1215>,
    is_relative = <function 1216>,
    join = <function 1217>,
    parent = <function 1218>,
    relative = <function 1219>,
    remove_trailing = <function 1220>,
    separator = <function 1221>,
    shorten = <function 1222>,
    split = <function 1223>,
    starts_with_separator = <function 1224>,
    tail = <function 1225>,
    to_matching_str = <function 1226>
  },
  ["fzf-lua.previewer"] = {
    base = {
      new = <function 1227>,
      <metatable> = {
        __call = <function 1228>
      }
    },
    bat = {
      cmdline = <function 1229>,
      new = <function 1230>,
      <metatable> = {
        __call = <function 1231>
      }
    },
    bat_async = {
      cmdline = <function 1232>,
      new = <function 1233>,
      <metatable> = {
        __call = <function 1234>
      }
    },
    buffer = {
      <metatable> = {
        __call = <function 1235>
      }
    },
    cmd = {
      action = <function 1236>,
      cmdline = <function 1237>,
      new = <function 1238>,
      <metatable> = {
        __call = <function 1239>
      }
    },
    cmd_async = {
      cmdline = <function 1240>,
      new = <function 1241>,
      <metatable> = {
        __call = <function 1242>
      }
    },
    head = {
      cmdline = <function 1243>,
      new = <function 1244>,
      <metatable> = {
        __call = <function 1245>
      }
    }
  },
  ["fzf-lua.providers.buffers"] = {
    buffers = <function 1119>
  },
  ["fzf-lua.providers.colorschemes"] = {
    colorschemes = <function 1121>
  },
  ["fzf-lua.providers.files"] = {
    files = <function 1124>
  },
  ["fzf-lua.providers.git"] = {
    bcommits = <function 1126>,
    branches = <function 1127>,
    commits = <function 1128>,
    files = <function 1129>,
    status = <function 1130>
  },
  ["fzf-lua.providers.grep"] = {
    grep = <function 1131>,
    grep_cWORD = <function 1132>,
    grep_curbuf = <function 1133>,
    grep_cword = <function 1134>,
    grep_last = <function 1135>,
    grep_visual = <function 1136>,
    live_grep = <function 1139>,
    live_grep_sk = <function 1246>
  },
  ["fzf-lua.providers.helptags"] = {
    helptags = <function 1137>
  },
  ["fzf-lua.providers.lsp"] = {
    code_actions = <function 1141>,
    declarations = <function 1142>,
    definitions = <function 1143>,
    diagnostics = <function 1144>,
    document_symbols = <function 1145>,
    implementations = <function 1146>,
    live_workspace_symbols = <function 1147>,
    references = <function 1148>,
    typedefs = <function 1149>,
    workspace_diagnostics = <function 1150>,
    workspace_symbols = <function 1151>
  },
  ["fzf-lua.providers.manpages"] = {
    manpages = <function 1152>
  },
  ["fzf-lua.providers.nvim"] = {
    command_history = <function 1122>,
    commands = <function 1123>,
    keymaps = <function 1138>,
    marks = <function 1153>,
    registers = <function 1156>,
    search_history = <function 1157>,
    spell_suggest = <function 1159>
  },
  ["fzf-lua.providers.oldfiles"] = {
    oldfiles = <function 1154>
  },
  ["fzf-lua.providers.quickfix"] = {
    loclist = <function 1140>,
    quickfix = <function 1155>
  },
  ["fzf-lua.providers.tags"] = {
    btags = <function 1118>,
    tags = <function 1160>
  },
  ["fzf-lua.utils"] = {
    _echo_multiline = <function 1247>,
    _if = <function 1248>,
    ansi_codes = {
      black = <function 1249>,
      blue = <function 1250>,
      bold = <function 1251>,
      clear = <function 1252>,
      cyan = <function 1253>,
      dark_grey = <function 1254>,
      green = <function 1255>,
      grey = <function 1256>,
      magenta = <function 1257>,
      red = <function 1258>,
      white = <function 1259>,
      yellow = <function 1260>
    },
    ansi_colors = {
      black = "\27[0;30m",
      blue = "\27[0;34m",
      bold = "\27[1m",
      clear = "\27[0m",
      cyan = "\27[0;36m",
      dark_grey = "\27[0;97m",
      green = "\27[0;32m",
      grey = "\27[0;90m",
      magenta = "\27[0;35m",
      red = "\27[0;31m",
      white = "\27[0;98m",
      yellow = "\27[0;33m"
    },
    delayed_cb = <function 1261>,
    err = <function 1262>,
    feed_keys_termcodes = <function 1263>,
    get_visual_selection = <function 1264>,
    info = <function 1265>,
    is_git_repo = <function 1266>,
    nbsp = " ",
    read_file = <function 1267>,
    read_file_async = <function 1268>,
    rg_escape = <function 1269>,
    send_ctrl_c = <function 1270>,
    shell_error = <function 1271>,
    tbl_concat = <function 1272>,
    tbl_deep_clone = <function 1273>,
    tbl_has = <function 1274>,
    tbl_length = <function 1275>,
    tbl_or = <function 1276>,
    tbl_pack = <function 1277>,
    tbl_unpack = <function 1278>,
    warn = <function 1279>
  },
  ["fzf.actions"] = {
    action = <function 1280>,
    async_action = <function 1281>,
    raw_action = <function 1282>,
    raw_async_action = <function 1283>
  },
  ["fzf.floating_window"] = {
    create = <function 1284>
  },
  ["fzf.helpers"] = {
    choices_to_shell_cmd_previewer = <function 1285>,
    cmd_line_transformer = <function 1286>
  },
  ["fzf.registry"] = {
    get_func = <function 1287>,
    register_func = <function 1288>
  },
  ["github-theme"] = {
    setup = <function 1289>
  },
  ["github-theme.colors"] = {
    setup = <function 1290>
  },
  ["github-theme.config"] = {
    applyConfiguration = <function 1291>,
    config = {
      colors = {},
      commentStyle = "italic",
      darkFloat = true,
      darkSidebar = true,
      dev = false,
      functionStyle = "NONE",
      hideEndOfBuffer = true,
      hideInactiveStatusline = false,
      keywordStyle = "italic",
      sidebars = {},
      themeStyle = "dark",
      transform_colors = false,
      transparent = false,
      variableStyle = "NONE"
    }
  },
  ["github-theme.hsluv"] = {
    dot_product = <function 1292>,
    epsilon = 0.0088564516,
    from_linear = <function 1293>,
    get_bounds = <function 1294>,
    hex_to_hpluv = <function 1295>,
    hex_to_hsluv = <function 1296>,
    hex_to_rgb = <function 1297>,
    hpluv_to_hex = <function 1298>,
    hpluv_to_lch = <function 1299>,
    hpluv_to_rgb = <function 1300>,
    hsluv_to_hex = <function 1301>,
    hsluv_to_lch = <function 1302>,
    hsluv_to_rgb = <function 1303>,
    kappa = 903.2962962,
    l_to_y = <function 1304>,
    lch_to_hpluv = <function 1305>,
    lch_to_hsluv = <function 1306>,
    lch_to_luv = <function 1307>,
    lch_to_rgb = <function 1308>,
    luv_to_lch = <function 1309>,
    luv_to_xyz = <function 1310>,
    m = { { 3.2409699419045, -1.5373831775701, -0.498610760293 }, { -0.96924363628087, 1.8759675015077, 0.041555057407175 }, { 0.055630079696993, -0.20397695888897, 1.0569715142429 } },
    max_safe_chroma_for_l = <function 1311>,
    max_safe_chroma_for_lh = <function 1312>,
    minv = { { 0.41239079926595, 0.35758433938387, 0.18048078840183 }, { 0.21263900587151, 0.71516867876775, 0.072192315360733 }, { 0.019330818715591, 0.11919477979462, 0.95053215224966 } },
    refU = 0.19783000664283,
    refV = 0.46831999493879,
    refY = 1,
    rgb_to_hex = <function 1313>,
    rgb_to_hpluv = <function 1314>,
    rgb_to_hsluv = <function 1315>,
    rgb_to_lch = <function 1316>,
    rgb_to_xyz = <function 1317>,
    to_linear = <function 1318>,
    xyz_to_luv = <function 1319>,
    xyz_to_rgb = <function 1320>,
    y_to_l = <function 1321>
  },
  ["github-theme.theme"] = {
    setup = <function 1322>
  },
  ["github-theme.util"] = {
    autocmds = <function 1323>,
    bg = "#24292e",
    blend = <function 1324>,
    brighten = <function 1325>,
    colorCache = {},
    color_overrides = <function 1326>,
    colorsUsed = {
      ["#044289"] = true,
      ["#1f2428"] = true,
      ["#2188ff"] = true,
      ["#23d18b"] = true,
      ["#24292e"] = true,
      ["#244032"] = true,
      ["#25686c"] = true,
      ["#265459"] = true,
      ["#284566"] = true,
      ["#28a745"] = true,
      ["#2C3843"] = true,
      ["#2c313a"] = true,
      ["#32383e"] = true,
      ["#341a00"] = true,
      ["#34d058"] = true,
      ["#353629"] = true,
      ["#383D3B"] = true,
      ["#393137"] = true,
      ["#3b8eea"] = true,
      ["#404030"] = true,
      ["#40474E"] = true,
      ["#444c56"] = true,
      ["#444d56"] = true,
      ["#462c32"] = true,
      ["#56d364"] = true,
      ["#6a737d"] = true,
      ["#75beff"] = true,
      ["#79b8ff"] = true,
      ["#85e89d"] = true,
      ["#9ecbff"] = true,
      ["#b392f0"] = true,
      ["#bc3fbc"] = true,
      ["#c9d1d9"] = true,
      ["#cca700"] = true,
      ["#d18616"] = true,
      ["#d1d5da"] = true,
      ["#e1e4e8"] = true,
      ["#e2e210"] = true,
      ["#e3b341"] = true,
      ["#e5e5e5"] = true,
      ["#ea4a5a"] = true,
      ["#eeeeb3"] = true,
      ["#f14c4c"] = true,
      ["#f5f543"] = true,
      ["#f85149"] = true,
      ["#f97583"] = true,
      ["#fdaeb7"] = true,
      ["#ffab70"] = true,
      NONE = true
    },
    darken = <function 1327>,
    debug = <function 1328>,
    fg = "#ffffff",
    getColor = <function 1329>,
    highlight = <function 1330>,
    invertColor = <function 1331>,
    light = <function 1332>,
    light_colors = <function 1333>,
    lighten = <function 1334>,
    load = <function 1335>,
    onColorScheme = <function 1336>,
    random = <function 1337>,
    randomColor = <function 1338>,
    syntax = <function 1339>,
    template = <function 1340>,
    terminal = <function 1341>
  },
  gitsigns = {
    _attach_disable = <function 1342>,
    _attach_enable = <function 1343>,
    _complete = <function 1344>,
    _run_func = <function 1345>,
    _update_highlights = <function 1346>,
    attach = <function 1347>,
    detach = <function 1348>,
    detach_all = <function 1349>,
    setup = <function 1350>,
    <metatable> = {
      __index = <function 1351>
    }
  },
  ["gitsigns.cache"] = {
    CacheEntry = <60>{
      destroy = <function 1352>,
      get_compare_obj = <function 1353>,
      get_compare_text = <function 1354>,
      new = <function 1355>
    },
    CacheObj = <61>{
      destroy = <function 1356>
    },
    cache = { {
        compare_file = "/tmp/lua_QSz3UH",
        compare_text = {},
        file = "/home/a/repos/dotfiles/.config/nvim/lua/neovim_configuration/themes/github.lua",
        git_obj = {
          abbrev_head = "master",
          file = "/home/a/repos/dotfiles/.config/nvim/lua/neovim_configuration/themes/github.lua",
          gitdir = "/home/a/repos/dotfiles/.git",
          has_conflicts = false,
          relpath = ".config/nvim/lua/neovim_configuration/themes/github.lua",
          toplevel = "/home/a/repos/dotfiles",
          username = "Baker",
          <metatable> = {
            __index = <62>{
              command = <function 1357>,
              ensure_file_in_index = <function 1358>,
              file_info = <function 1359>,
              files_changed = <function 1360>,
              get_show_text = <function 1361>,
              has_moved = <function 1362>,
              new = <function 1363>,
              run_blame = <function 1364>,
              stage_hunks = <function 1365>,
              unstage_file = <function 1366>,
              update_abbrev_head = <function 1367>,
              update_file_info = <function 1368>
            }
          }
        },
        hunks = { {
            added = {
              count = 15,
              start = 1
            },
            dend = 15,
            head = "@@ -0 +1,15 @@",
            lines = { "+local cmd = vim.cmd", "+", '+require "github-theme".setup {', '+\tthemeStyle = "dark"', "+}", "+", '+local theme = require "neovim_configuration.themes.default" ', "+", '+theme.gitsigns_add_text = "│"', '+theme.gitsigns_change_text = "│"', '+theme.gitsigns_delete_text = "│"', '+theme.gitsigns_topdelete_text = "│"', '+theme.gitsigns_changedelete_text = "│"', "+", "+return theme" },
            removed = {
              count = 0,
              start = 0
            },
            start = 1,
            type = "add",
            vend = 15
          } },
        index_watcher = <userdata 23>,
        pending_signs = {},
        staged_diffs = {},
        <metatable> = {
          __index = <table 60>
        }
      },
      [4] = {
        compare_file = "/tmp/lua_Cn2nCs",
        compare_text = {},
        file = "/home/a/repos/dotfiles/.config/nvim/lua/neovim_configuration/theme.lua",
        git_obj = {
          abbrev_head = "master",
          file = "/home/a/repos/dotfiles/.config/nvim/lua/neovim_configuration/theme.lua",
          gitdir = "/home/a/repos/dotfiles/.git",
          has_conflicts = false,
          relpath = ".config/nvim/lua/neovim_configuration/theme.lua",
          toplevel = "/home/a/repos/dotfiles",
          username = "Baker",
          <metatable> = {
            __index = <table 62>
          }
        },
        hunks = { {
            added = {
              count = 17,
              start = 1
            },
            dend = 17,
            head = "@@ -0 +1,17 @@",
            lines = { '+local util = require "neovim_configuration.util"', "+local cmd = vim.cmd", "+", '+local colorscheme = "default"', "+", "+-- If we don't have a theme designated for this colorscheme then just use colors derived from highlights in the colorscheme", '+--local has_theme, theme = pcall(require, "themes." .. "github")', "+", '+local config_dir = os.getenv("XDG_CONFIG_HOME")', '+local has_theme = util.file_exists(config_dir .. "/nvim/lua/neovim_configuration/themes/" .. colorscheme .. ".lua")', "+", "+if not has_theme then", '+\tcmd ("colorscheme " .. colorscheme)', '+\treturn require "neovim_configuration.themes.default"', "+else", '+\treturn require("neovim_configuration.themes." .. colorscheme)', "+end" },
            removed = {
              count = 0,
              start = 0
            },
            start = 1,
            type = "add",
            vend = 17
          } },
        index_watcher = <userdata 24>,
        pending_signs = {},
        staged_diffs = {},
        <metatable> = {
          __index = <table 60>
        }
      },
      [10] = {
        compare_file = "/tmp/lua_r0vjJK",
        compare_text = { "for k, _ in pairs(package.loaded) do", '\tif string.match(k, "^CONFIG") then', "\t\tpackage.loaded[k] = nil", "\tend", "end", "", "", 'vim = vim -- Less "undefined global" warnings this way', "", 'local powerline_symbol = "up_slant"', "-------------", "-- General --", "-------------", "require 'CONFIG.plugins'", "require 'CONFIG.opts'", "require 'CONFIG.bindings'", "require 'CONFIG.colorscheme'", 'require "CONFIG.lsp"', 'require "CONFIG.statusline"(powerline_symbol)', "", 'vim.cmd "doautocmd User Restarted"', "" },
        file = "/home/a/repos/dotfiles/.config/nvim/init.lua",
        git_obj = {
          abbrev_head = "master",
          file = "/home/a/repos/dotfiles/.config/nvim/init.lua",
          gitdir = "/home/a/repos/dotfiles/.git",
          has_conflicts = false,
          mode_bits = "100644",
          object_name = "d7e7680962e05cd3632e715f2f2235b02b499375",
          relpath = ".config/nvim/init.lua",
          toplevel = "/home/a/repos/dotfiles",
          username = "Baker",
          <metatable> = {
            __index = <table 62>
          }
        },
        hunks = { {
            added = {
              count = 2,
              start = 2
            },
            dend = 2,
            head = "@@ -2,1 +2,2 @@",
            lines = { '-\tif string.match(k, "^CONFIG") then', '+\tif string.match(k, "^neovim_configuration") then', "+\t\tprint(k)" },
            removed = {
              count = 1,
              start = 2
            },
            start = 2,
            type = "change",
            vend = 3
          }, {
            added = {
              count = 4,
              start = 8
            },
            dend = 11,
            head = "@@ -7,16 +8,4 @@",
            lines = { "-", '-vim = vim -- Less "undefined global" warnings this way', "-", '-local powerline_symbol = "up_slant"', "--------------", "--- General --", "--------------", "-require 'CONFIG.plugins'", "-require 'CONFIG.opts'", "-require 'CONFIG.bindings'", "-require 'CONFIG.colorscheme'", '-require "CONFIG.lsp"', '-require "CONFIG.statusline"(powerline_symbol)', "-", '-vim.cmd "doautocmd User Restarted"', "-", '+require "neovim_configuration.opts"', '+require "neovim_configuration.bindings"', '+require "neovim_configuration.plugin_manager"', '+require "neovim_configuration.theme"' },
            removed = {
              count = 16,
              start = 7
            },
            start = 8,
            type = "change",
            vend = 11
          } },
        index_watcher = <userdata 25>,
        pending_signs = {},
        staged_diffs = {},
        <metatable> = {
          __index = <table 60>
        }
      },
      [17] = {
        compare_file = "/tmp/lua_WUVnql",
        compare_text = {},
        file = "/home/a/repos/dotfiles/.config/nvim/output.txt",
        git_obj = {
          abbrev_head = "master",
          file = "/home/a/repos/dotfiles/.config/nvim/output.txt",
          gitdir = "/home/a/repos/dotfiles/.git",
          has_conflicts = false,
          relpath = ".config/nvim/output.txt",
          toplevel = "/home/a/repos/dotfiles",
          username = "Baker",
          <metatable> = {
            __index = <table 62>
          }
        },
        hunks = { {
            added = {
              count = 5,
              start = 1
            },
            dend = 5,
            head = "@@ -0 +1,5 @@",
            lines = { "+", '+local colorscheme = "default"', '+local colorscheme = "default"', '+local colorscheme = "default"', '+local colorscheme = "default"' },
            removed = {
              count = 0,
              start = 0
            },
            start = 1,
            type = "add",
            vend = 5
          } },
        index_watcher = <userdata 26>,
        pending_signs = {},
        staged_diffs = {},
        <metatable> = {
          __index = <table 60>
        }
      },
      <metatable> = {
        __index = <table 61>
      }
    }
  },
  ["gitsigns.config"] = {
    Config = {
      SignsConfig = {},
      current_line_blame_formatter_opts = {},
      watch_index = {},
      yadm = {}
    },
    build = <function 1369>,
    config = {
      _git_version = "auto",
      _refresh_staged_on_update = true,
      attach_to_untracked = true,
      count_chars = <63>{ "1", "2", "3", "4", "5", "6", "7", "8", "9",
        ["+"] = ">"
      },
      current_line_blame = false,
      current_line_blame_delay = 1000,
      current_line_blame_formatter = <function 1370>,
      current_line_blame_formatter_opts = <64>{
        relative_time = false
      },
      current_line_blame_position = "eol",
      debug_mode = false,
      diff_algorithm = "myers",
      keymaps = {
        ["n <leader>hR"] = '<cmd>lua require"gitsigns".reset_buffer()<CR>',
        ["n <leader>hb"] = '<cmd>lua require"gitsigns".blame_line(true)<CR>',
        ["n <leader>hp"] = '<cmd>lua require"gitsigns".preview_hunk()<CR>',
        ["n <leader>hr"] = '<cmd>lua require"gitsigns".reset_hunk()<CR>',
        ["n <leader>hs"] = '<cmd>lua require"gitsigns".stage_hunk()<CR>',
        ["n <leader>hu"] = '<cmd>lua require"gitsigns".undo_stage_hunk()<CR>',
        ["n [c"] = { "&diff ? '[c' : '<cmd>lua require\"gitsigns.actions\".prev_hunk()<CR>'",
          expr = true
        },
        ["n ]c"] = { "&diff ? ']c' : '<cmd>lua require\"gitsigns.actions\".next_hunk()<CR>'",
          expr = true
        },
        noremap = true,
        ["o ih"] = ':<C-U>lua require"gitsigns.actions".select_hunk()<CR>',
        ["v <leader>hr"] = '<cmd>lua require"gitsigns".reset_hunk({vim.fn.line("."), vim.fn.line("v")})<CR>',
        ["v <leader>hs"] = '<cmd>lua require"gitsigns".stage_hunk({vim.fn.line("."), vim.fn.line("v")})<CR>',
        ["x ih"] = ':<C-U>lua require"gitsigns.actions".select_hunk()<CR>'
      },
      linehl = false,
      max_file_length = 40000,
      numhl = false,
      preview_config = <65>{
        border = "single",
        col = 1,
        relative = "cursor",
        row = 0,
        style = "minimal"
      },
      sign_priority = 6,
      signcolumn = true,
      signs = {
        add = {
          hl = "GitSignsAdd",
          linehl = "GitSignsAddLn",
          numhl = "GitSignsAddNr",
          text = "│"
        },
        change = {
          hl = "GitSignsChange",
          linehl = "GitSignsChangeLn",
          numhl = "GitSignsChangeNr",
          text = "│"
        },
        changedelete = {
          hl = "GitSignsChange",
          linehl = "GitSignsChangeLn",
          numhl = "GitSignsChangeNr",
          text = "│"
        },
        delete = {
          hl = "GitSignsDelete",
          linehl = "GitSignsDeleteLn",
          numhl = "GitSignsDeleteNr",
          text = "│"
        },
        topdelete = {
          hl = "GitSignsDelete",
          linehl = "GitSignsDeleteLn",
          numhl = "GitSignsDeleteNr",
          text = "│"
        }
      },
      status_formatter = <function 1371>,
      update_debounce = 100,
      use_internal_diff = true,
      watch_index = {
        follow_files = true,
        interval = 1000
      },
      word_diff = false,
      yadm = <66>{
        enable = false
      }
    },
    schema = {
      _git_version = {
        default = "auto",
        description = "      Version of git available. Set to 'auto' to automatically detect.\n    ",
        type = "string"
      },
      _refresh_staged_on_update = {
        default = true,
        description = "      Always refresh the staged file on each update. Disabling this will cause\n      the staged file to only be refreshed when an update to the index is\n      detected.\n    ",
        type = "boolean"
      },
      attach_to_untracked = {
        default = true,
        description = "      Attach to untracked files.\n    ",
        type = "boolean"
      },
      count_chars = {
        default = <table 63>,
        description = "      The count characters used when `signs.*.show_count` is enabled. The\n      `+` entry is used as a fallback. With the default, any count outside\n      of 1-9 uses the `>` character in the sign.\n\n      Possible use cases for this field:\n        • to specify unicode characters for the counts instead of 1-9.\n        • to define characters to be used for counts greater than 9.\n    ",
        type = "table"
      },
      current_line_blame = {
        default = false,
        description = "      Adds an unobtrusive and customisable blame annotation at the end of\n      the current line.\n\n      The highlight group used for the text is `GitSignsCurrentLineBlame`.\n    ",
        type = "boolean"
      },
      current_line_blame_delay = {
        default = 1000,
        description = "      Sets the delay before blame virtual text is displayed in milliseconds.\n    ",
        type = "number"
      },
      current_line_blame_formatter = {
        default = <function 1370>,
        default_help = "function(name, blame_info, opts)\n      if blame_info.author == name then\n        blame_info.author = 'You'\n      end\n\n      local text\n      if blame_info.author == 'Not Committed Yet' then\n        text = blame_info.author\n      else\n        local date_time\n\n        if opts.relative_time then\n          date_time = require('gitsigns.util').get_relative_time(tonumber(blame_info['author_time']))\n        else\n          date_time = os.date('%Y-%m-%d', tonumber(blame_info['author_time']))\n        end\n\n        text = string.format('%s, %s - %s', blame_info.author, date_time, blame_info.summary)\n      end\n\n      return {{' '..text, 'GitSignsCurrentLineBlame'}}\n    end",
        description = "      Function used to format the virtual text of\n      |gitsigns-config-current_line_blame|.\n\n      Parameters: ~\n        {name}       Git user name returned from `git config user.name` .\n        {blame_info} Table with the following keys:\n                       • `abbrev_sha`: string\n                       • `orig_lnum`: integer\n                       • `final_lnum`: integer\n                       • `author`: string\n                       • `author_mail`: string\n                       • `author_time`: integer\n                       • `author_tz`: string\n                       • `committer`: string\n                       • `committer_mail`: string\n                       • `committer_time`: integer\n                       • `committer_tz`: string\n                       • `summary`: string\n                       • `previous`: string\n                       • `filename`: string\n\n                     Note that the keys map onto the output of:\n                       `git blame --line-porcelain`\n\n        {opts}       Passed directly from\n                     |gitsigns-config-current_line_blame_formatter_opts|.\n\n      Return: ~\n        The result of this function is passed directly to the `opts.virt_text`\n        field of |nvim_buf_set_extmark|.\n    ",
        type = "function"
      },
      current_line_blame_formatter_opts = {
        deep_extend = true,
        default = <table 64>,
        description = "      Options for the current line blame annotation formatter.\n\n      Fields: ~\n        • relative_time: boolean\n    ",
        type = "table"
      },
      current_line_blame_position = {
        default = "eol",
        description = "        Blame annotation position.\n\n        Available values:\n          `eol`         Right after eol character.\n          `overlay`     Display over the specified column, without shifting\n                      the underlying text.\n          `right_align` Display right aligned in the window.\n    ",
        type = "string"
      },
      debug_mode = {
        default = false,
        description = "      Enables debug logging and makes the following functions\n      available: `dump_cache`, `debug_messages`, `clear_debug`.\n    ",
        type = "boolean"
      },
      diff_algorithm = {
        default = <function 1372>,
        default_help = "taken from 'diffopt'",
        description = "      Diff algorithm to pass to `git diff` .\n    ",
        type = "string"
      },
      keymaps = {
        default = {
          ["n <leader>hR"] = '<cmd>lua require"gitsigns".reset_buffer()<CR>',
          ["n <leader>hS"] = '<cmd>lua require"gitsigns".stage_buffer()<CR>',
          ["n <leader>hU"] = '<cmd>lua require"gitsigns".reset_buffer_index()<CR>',
          ["n <leader>hb"] = '<cmd>lua require"gitsigns".blame_line(true)<CR>',
          ["n <leader>hp"] = '<cmd>lua require"gitsigns".preview_hunk()<CR>',
          ["n <leader>hr"] = '<cmd>lua require"gitsigns".reset_hunk()<CR>',
          ["n <leader>hs"] = '<cmd>lua require"gitsigns".stage_hunk()<CR>',
          ["n <leader>hu"] = '<cmd>lua require"gitsigns".undo_stage_hunk()<CR>',
          ["n [c"] = { "&diff ? '[c' : '<cmd>lua require\"gitsigns\".prev_hunk()<CR>'",
            expr = true
          },
          ["n ]c"] = { "&diff ? ']c' : '<cmd>lua require\"gitsigns\".next_hunk()<CR>'",
            expr = true
          },
          noremap = true,
          ["o ih"] = ':<C-U>lua require"gitsigns".select_hunk()<CR>',
          ["v <leader>hr"] = '<cmd>lua require"gitsigns".reset_hunk({vim.fn.line("."), vim.fn.line("v")})<CR>',
          ["v <leader>hs"] = '<cmd>lua require"gitsigns".stage_hunk({vim.fn.line("."), vim.fn.line("v")})<CR>',
          ["x ih"] = ':<C-U>lua require"gitsigns".select_hunk()<CR>'
        },
        description = "      Keymaps to set up when attaching to a buffer.\n\n      Each key in the table defines the mode and key (whitespace delimited)\n      for the mapping and the value defines what the key maps to. The value\n      can be a table which can contain keys matching the options defined in\n      |map-arguments| which are: `expr`, `noremap`, `nowait`, `script`,\n      `silent`, `unique` and `buffer`.  These options can also be used in\n      the top level of the table to define default options for all mappings.\n\n      Since this field is not extended (unlike |gitsigns-config-signs|),\n      mappings defined in this field can be disabled by setting the whole field\n      to `{}`, and |gitsigns-config-on_attach| can instead be used to define\n      mappings.\n    ",
        type = "table"
      },
      linehl = {
        default = false,
        description = "      Enable/disable line highlights.\n\n      When enabled the highlights defined in `signs.*.linehl` are used. If\n      the highlight group does not exist, then it is automatically defined\n      and linked to the corresponding highlight group in `signs.*.hl`.\n    ",
        type = "boolean"
      },
      max_file_length = {
        default = 40000,
        description = "      Max file length to attach to.\n    ",
        type = "number"
      },
      numhl = {
        default = false,
        description = "      Enable/disable line number highlights.\n\n      When enabled the highlights defined in `signs.*.numhl` are used. If\n      the highlight group does not exist, then it is automatically defined\n      and linked to the corresponding highlight group in `signs.*.hl`.\n    ",
        type = "boolean"
      },
      on_attach = {
        description = "      Callback called when attaching to a buffer. Mainly used to setup keymaps\n      when `config.keymaps` is empty. The buffer number is passed as the first\n      argument.\n\n      This callback can return `false` to prevent attaching to the buffer.\n\n      Example: >\n        on_attach = function(bufnr)\n          if vim.api.nvim_buf_get_name(bufnr):match(<PATTERN>) then\n            -- Don't attach to specific buffers whose name matches a pattern\n            return false\n          end\n\n          -- Setup keymaps\n          vim.api.nvim_buf_set_keymap(bufnr, 'n', 'hs', '<cmd>lua require\"gitsigns\".stage_hunk()<CR>', {})\n          ... -- More keymaps\n        end\n<\n    ",
        type = "function"
      },
      preview_config = {
        deep_extend = true,
        default = <table 65>,
        description = "      Option overrides for the Gitsigns preview window. Table is passed directly\n      to `nvim_open_win`.\n    ",
        type = "table"
      },
      sign_priority = {
        default = 6,
        description = "      Priority to use for signs.\n    ",
        type = "number"
      },
      signcolumn = {
        default = true,
        description = "      Enable/disable symbols in the sign column.\n\n      When enabled the highlights defined in `signs.*.hl` and symbols defined\n      in `signs.*.text` are used.\n    ",
        type = "boolean"
      },
      signs = {
        deep_extend = true,
        default = {
          add = {
            hl = "GitSignsAdd",
            linehl = "GitSignsAddLn",
            numhl = "GitSignsAddNr",
            text = "│"
          },
          change = {
            hl = "GitSignsChange",
            linehl = "GitSignsChangeLn",
            numhl = "GitSignsChangeNr",
            text = "│"
          },
          changedelete = {
            hl = "GitSignsChange",
            linehl = "GitSignsChangeLn",
            numhl = "GitSignsChangeNr",
            text = "~"
          },
          delete = {
            hl = "GitSignsDelete",
            linehl = "GitSignsDeleteLn",
            numhl = "GitSignsDeleteNr",
            text = "_"
          },
          topdelete = {
            hl = "GitSignsDelete",
            linehl = "GitSignsDeleteLn",
            numhl = "GitSignsDeleteNr",
            text = "‾"
          }
        },
        description = "      Configuration for signs:\n        • `hl` specifies the highlight group to use for the sign.\n        • `text` specifies the character to use for the sign.\n        • `numhl` specifies the highlight group to use for the number column\n          (see |gitsigns-config.numhl|).\n        • `linehl` specifies the highlight group to use for the line\n          (see |gitsigns-config.linehl|).\n        • `show_count` to enable showing count of hunk, e.g. number of deleted\n          lines.\n\n      Note if `hl`, `numhl` or `linehl` use a `GitSigns*` highlight and it is\n      not defined, it will be automatically derived by searching for other\n      defined highlights in the following order:\n        • `GitGutter*`\n        • `Signify*`\n        • `Diff*Gutter`\n        • `diff*`\n        • `Diff*`\n\n      For example if `signs.add.hl = GitSignsAdd` and `GitSignsAdd` is not\n      defined but `GitGutterAdd` is defined, then `GitSignsAdd` will be linked\n      to `GitGutterAdd`.\n    ",
        type = "table"
      },
      status_formatter = {
        default = <function 1371>,
        default_help = "function(status)\n      local added, changed, removed = status.added, status.changed, status.removed\n      local status_txt = {}\n      if added   and added   > 0 then table.insert(status_txt, '+'..added  ) end\n      if changed and changed > 0 then table.insert(status_txt, '~'..changed) end\n      if removed and removed > 0 then table.insert(status_txt, '-'..removed) end\n      return table.concat(status_txt, ' ')\n    end",
        description = "      Function used to format `b:gitsigns_status`.\n    ",
        type = "function"
      },
      update_debounce = {
        default = 100,
        description = "      Debounce time for updates (in milliseconds).\n    ",
        type = "number"
      },
      use_internal_diff = {
        default = <function 1373>,
        default_help = "`true` if luajit is present (windows unsupported)",
        description = "      Use Neovim's built in xdiff library for running diffs.\n\n      This uses LuaJIT's FFI interface.\n    ",
        type = "boolean"
      },
      watch_index = {
        default = {
          follow_files = true,
          interval = 1000
        },
        description = "      When opening a file, a libuv watcher is placed on the respective\n      `.git/index` file to detect when changes happen to use as a trigger to\n      update signs.\n\n      Fields: ~\n        • `interval`:\n            Interval the watcher waits between polls of `.git/index` is milliseconds.\n\n        • `follow_files`:\n            If a file is moved with `git mv`, switch the buffer to the new location.\n    ",
        type = "table"
      },
      word_diff = {
        default = false,
        description = "      Highlight intra-line word differences in the buffer.\n      Requires `config.use_internal_diff = true` .\n\n      Uses the highlights:\n        • GitSignsAddLn\n        • GitSignsChangeLn\n        • GitSignsDeleteLn\n    ",
        type = "boolean"
      },
      yadm = {
        default = <table 66>,
        description = "      yadm configuration.\n    ",
        type = "table"
      }
    }
  },
  ["gitsigns.current_line_blame"] = {
    reset = <function 1374>,
    setup = <function 1375>,
    update = <function 1376>
  },
  ["gitsigns.debounce"] = {
    debounce_trailing = <function 1377>,
    throttle_leading = <function 1378>
  },
  ["gitsigns.debug"] = {
    add_debug_functions = <function 1379>,
    debug_mode = false,
    dprint = <function 1380>,
    eprint = <function 1381>,
    messages = {}
  },
  ["gitsigns.diff_ffi"] = {
    run_diff = <function 1382>,
    run_word_diff = <function 1383>
  },
  ["gitsigns.git"] = {
    BlameInfo = {},
    Obj = <table 62>,
    Version = {},
    command = <function 107>,
    enable_yadm = false,
    set_version = <function 1384>,
    version = {
      major = 2,
      minor = 32,
      patch = 0
    }
  },
  ["gitsigns.highlight"] = {
    setup_highlight = <function 1385>
  },
  ["gitsigns.hunks"] = {
    Hunk = {
      Node = {}
    },
    compare_heads = <function 1386>,
    create_hunk = <function 1387>,
    create_patch = <function 1388>,
    extract_removed = <function 1389>,
    find_hunk = <function 1390>,
    find_nearest_hunk = <function 1391>,
    get_summary = <function 1392>,
    parse_diff_line = <function 1393>,
    process_hunks = <function 1394>
  },
  ["gitsigns.manager"] = {
    apply_win_signs = <function 1395>,
    apply_word_diff = <function 1396>,
    on_lines = <function 1397>,
    setup = <function 1398>,
    setup_signs_and_highlights = <function 1399>,
    update = <function 1400>,
    update_debounced = <function 1401>
  },
  ["gitsigns.mappings"] = <function 1402>,
  ["gitsigns.signs"] = {
    Sign = {},
    add = <function 1403>,
    define = <function 1404>,
    get = <function 1405>,
    remove = <function 1406>,
    sign_map = {
      add = "GitSignsAdd",
      change = "GitSignsChange",
      changedelete = "GitSignsChangeDelete",
      delete = "GitSignsDelete",
      topdelete = "GitSignsTopDelete"
    }
  },
  ["gitsigns.status"] = {
    StatusObj = {},
    clear = <function 1407>,
    clear_diff = <function 1408>,
    formatter = <function 1371>,
    update = <function 1409>
  },
  ["gitsigns.util"] = {
    dirname = <function 1410>,
    file_lines = <function 1411>,
    get_jit_os = <function 1412>,
    get_relative_time = <function 1413>,
    is_unix = true,
    job_cnt = 43,
    path_exists = <function 1414>,
    path_sep = "/",
    run_job = <function 1415>,
    tmpname = <function 1416>
  },
  io = <table 20>,
  jit = <table 21>,
  ["jit.opt"] = <table 22>,
  ["jit.util"] = <table 23>,
  lspconfig = {
    _root = {
      _setup = <function 1417>,
      commands = {
        LspInfo = { <function 1418>, "-nargs=0",
          description = "`:LspInfo` Displays attached, active, and configured language servers"
        },
        LspRestart = { <function 1419>, "-nargs=? -complete=customlist,v:lua.lsp_get_active_client_ids",
          description = "`:LspRestart` Manually restart the given language client."
        },
        LspStart = { <function 1420>, "-nargs=? -complete=custom,v:lua.lsp_complete_configured_servers",
          description = "`:LspStart` Manually launches a language server."
        },
        LspStop = { <function 1421>, "-nargs=? -complete=customlist,v:lua.lsp_get_active_client_ids",
          description = "`:LspStop` Manually stops the given language client."
        }
      }
    },
    available_servers = <function 1422>,
    util = <67>{
      add_hook_after = <function 1423>,
      add_hook_before = <function 1424>,
      create_module_commands = <function 1425>,
      default_config = {
        autostart = true,
        handlers = <68>{},
        init_options = vim.empty_dict(),
        log_level = 2,
        message_level = 2,
        settings = vim.empty_dict()
      },
      find_git_ancestor = <function 1426>,
      find_node_modules_ancestor = <function 1427>,
      find_package_json_ancestor = <function 1428>,
      has_bins = <function 1429>,
      path = {
        dirname = <function 1430>,
        exists = <function 1431>,
        is_absolute = <function 1432>,
        is_descendant = <function 1433>,
        is_dir = <function 1434>,
        is_file = <function 1435>,
        iterate_parents = <function 1436>,
        join = <function 1437>,
        sep = "/",
        traverse_parents = <function 1438>
      },
      root_pattern = <function 1439>,
      script_path = <function 1440>,
      search_ancestors = <function 1441>,
      server_per_root_dir_manager = <function 1442>,
      validate_bufnr = <function 1443>
    },
    <metatable> = {
      __index = <function 1444>
    }
  },
  ["lspconfig/configs"] = {
    cssls = {
      _autostart = true,
      _setup_buffer = <function 1445>,
      autostart = <function 1446>,
      cmd = { "css-languageserver", "--stdio" },
      commands = <69>{},
      commands_created = false,
      document_config = {
        commands = <table 69>,
        default_config = {
          cmd = { "vscode-css-language-server", "--stdio" },
          filetypes = <70>{ "css", "scss", "less" },
          root_dir = <function 1447>,
          settings = {
            css = {
              validate = true
            },
            less = {
              validate = true
            },
            scss = {
              validate = true
            }
          }
        },
        docs = {
          default_config = {
            root_dir = 'root_pattern("package.json")'
          },
          description = "\nhttps://github.com/hrsh7th/vscode-langservers-extracted\n\n`css-languageserver` can be installed via `npm`:\n\n```sh\nnpm i -g vscode-langservers-extracted\n```\n\nNeovim does not currently include built-in snippets. `vscode-css-language-server` only provides completions when snippet support is enabled. To enable completion, install a snippet plugin and add the following override to your language client capabilities during setup.\n\n```lua\n--Enable (broadcasting) snippet capability for completion\nlocal capabilities = vim.lsp.protocol.make_client_capabilities()\ncapabilities.textDocument.completion.completionItem.snippetSupport = true\n\nrequire'lspconfig'.cssls.setup {\n  capabilities = capabilities,\n}\n```\n"
        }
      },
      filetypes = <table 70>,
      get_root_dir = <function 1448>,
      handlers = <table 68>,
      make_config = <function 1449>,
      manager = {
        add = <function 1450>,
        clients = <function 1451>,
        try_add = <function 1452>,
        try_add_wrapper = <function 1453>
      },
      name = "cssls",
      setup = <function 1454>
    },
    html = {
      _autostart = true,
      _setup_buffer = <function 1455>,
      autostart = <function 1456>,
      cmd = { "vscode-html-languageserver", "--stdio" },
      commands = <71>{},
      commands_created = false,
      document_config = {
        commands = <table 71>,
        default_config = {
          cmd = { "vscode-html-language-server", "--stdio" },
          filetypes = { "html" },
          init_options = {
            configurationSection = { "html", "css", "javascript" },
            embeddedLanguages = {
              css = true,
              javascript = true
            }
          },
          root_dir = <function 1457>,
          settings = {}
        },
        docs = {
          description = "https://github.com/hrsh7th/vscode-langservers-extracted\n\n`vscode-html-language-server` can be installed via `npm`:\n```sh\nnpm i -g vscode-langservers-extracted\n```\n\nNeovim does not currently include built-in snippets. `vscode-html-language-server` only provides completions when snippet support is enabled.\nTo enable completion, install a snippet plugin and add the following override to your language client capabilities during setup.\n\n```lua\n--Enable (broadcasting) snippet capability for completion\nlocal capabilities = vim.lsp.protocol.make_client_capabilities()\ncapabilities.textDocument.completion.completionItem.snippetSupport = true\n\nrequire'lspconfig'.html.setup {\n  capabilities = capabilities,\n}\n```\n"
        }
      },
      filetypes = { "php", "html" },
      get_root_dir = <function 1458>,
      handlers = <table 68>,
      make_config = <function 1459>,
      manager = {
        add = <function 1460>,
        clients = <function 1461>,
        try_add = <function 1462>,
        try_add_wrapper = <function 1463>
      },
      name = "html",
      setup = <function 1464>
    },
    intelephense = {
      _autostart = true,
      _setup_buffer = <function 1465>,
      autostart = <function 1466>,
      cmd = <72>{ "intelephense", "--stdio" },
      commands = <73>{},
      commands_created = false,
      document_config = {
        commands = <table 73>,
        default_config = {
          cmd = <table 72>,
          filetypes = <74>{ "php" },
          root_dir = <function 1467>
        },
        docs = {
          default_config = {
            init_options = "{\n        storagePath = Optional absolute path to storage dir. Defaults to os.tmpdir().\n        globalStoragePath = Optional absolute path to a global storage dir. Defaults to os.homedir().\n        licenceKey = Optional licence key or absolute path to a text file containing the licence key.\n        clearCache = Optional flag to clear server state. State can also be cleared by deleting {storagePath}/intelephense\n        -- See https://github.com/bmewburn/intelephense-docs#initialisation-options\n      }",
            root_dir = 'root_pattern("composer.json", ".git")',
            settings = "{\n        intelephense = {\n          files = {\n            maxSize = 1000000;\n          };\n        };\n        -- See https://github.com/bmewburn/intelephense-docs#configuration-options\n      }"
          },
          description = "https://intelephense.com/\n\n`intelephense` can be installed via `npm`:\n```sh\nnpm install -g intelephense\n```\n"
        }
      },
      filetypes = <table 74>,
      get_root_dir = <function 1468>,
      handlers = <table 68>,
      make_config = <function 1469>,
      manager = {
        add = <function 1470>,
        clients = <function 1471>,
        try_add = <function 1472>,
        try_add_wrapper = <function 1473>
      },
      name = "intelephense",
      setup = <function 1474>
    },
    jsonls = {
      _autostart = true,
      _setup_buffer = <function 1475>,
      autostart = <function 1476>,
      cmd = { "vscode-json-languageserver", "--stdio" },
      commands = <75>{},
      commands_created = false,
      document_config = {
        commands = <table 75>,
        default_config = {
          cmd = { "vscode-json-language-server", "--stdio" },
          filetypes = <76>{ "json" },
          init_options = {
            provideFormatter = true
          },
          root_dir = <function 1477>
        },
        docs = {
          default_config = {
            root_dir = 'root_pattern(".git") or dirname'
          },
          description = "https://github.com/hrsh7th/vscode-langservers-extracted\n\nvscode-json-language-server, a language server for JSON and JSON schema\n\n`vscode-json-language-server` can be installed via `npm`:\n```sh\nnpm i -g vscode-langservers-extracted\n```\n\nvscode-json-language-server only provides range formatting. You can map a command that applies range formatting to the entire document:\n\n```lua\nrequire'lspconfig'.jsonls.setup {\n    commands = {\n      Format = {\n        function()\n          vim.lsp.buf.range_formatting({},{0,0},{vim.fn.line(\"$\"),0})\n        end\n      }\n    }\n}\n```\n",
          package_json = "https://raw.githubusercontent.com/microsoft/vscode/master/extensions/json-language-features/package.json"
        }
      },
      filetypes = <table 76>,
      get_root_dir = <function 1478>,
      handlers = <table 68>,
      make_config = <function 1479>,
      manager = {
        add = <function 1480>,
        clients = <function 1481>,
        try_add = <function 1482>,
        try_add_wrapper = <function 1483>
      },
      name = "jsonls",
      setup = <function 1484>
    },
    pyright = {
      _autostart = true,
      _setup_buffer = <function 1485>,
      autostart = <function 1486>,
      cmd = <77>{ "pyright-langserver", "--stdio" },
      commands = <78>{
        PyrightOrganizeImports = { <function 1487>,
          description = "Organize Imports"
        }
      },
      commands_created = false,
      document_config = {
        commands = <table 78>,
        default_config = {
          cmd = <table 77>,
          filetypes = <79>{ "python" },
          root_dir = <function 1488>,
          settings = {
            python = {
              analysis = {
                autoSearchPaths = true,
                diagnosticMode = "workspace",
                useLibraryCodeForTypes = true
              }
            }
          }
        },
        docs = {
          description = "https://github.com/microsoft/pyright\n\n`pyright`, a static type checker and language server for python\n",
          package_json = "https://raw.githubusercontent.com/microsoft/pyright/master/packages/vscode-pyright/package.json"
        }
      },
      filetypes = <table 79>,
      get_root_dir = <function 1489>,
      handlers = <table 68>,
      make_config = <function 1490>,
      manager = {
        add = <function 1491>,
        clients = <function 1492>,
        try_add = <function 1493>,
        try_add_wrapper = <function 1494>
      },
      name = "pyright",
      setup = <function 1495>
    },
    rust_analyzer = {
      _autostart = true,
      _setup_buffer = <function 1496>,
      autostart = <function 1497>,
      cmd = <80>{ "rust-analyzer" },
      commands = <81>{
        CargoReload = { <function 1498>,
          description = "Reload current cargo workspace"
        }
      },
      commands_created = false,
      document_config = {
        commands = <table 81>,
        default_config = {
          cmd = <table 80>,
          filetypes = <82>{ "rust" },
          root_dir = <function 1499>,
          settings = {
            ["rust-analyzer"] = {}
          }
        },
        docs = {
          default_config = {
            root_dir = 'root_pattern("Cargo.toml", "rust-project.json")'
          },
          description = "https://github.com/rust-analyzer/rust-analyzer\n\nrust-analyzer (aka rls 2.0), a language server for Rust\n\nSee [docs](https://github.com/rust-analyzer/rust-analyzer/tree/master/docs/user#settings) for extra settings.\n    ",
          package_json = "https://raw.githubusercontent.com/rust-analyzer/rust-analyzer/master/editors/code/package.json"
        }
      },
      filetypes = <table 82>,
      get_root_dir = <function 1500>,
      handlers = <table 68>,
      make_config = <function 1501>,
      manager = {
        add = <function 1502>,
        clients = <function 1503>,
        try_add = <function 1504>,
        try_add_wrapper = <function 1505>
      },
      name = "rust_analyzer",
      reload_workspace = <function 1506>,
      setup = <function 1507>
    },
    sumneko_lua = {
      _autostart = true,
      _setup_buffer = <function 1508>,
      autostart = <function 1509>,
      cmd = { "lua-language-server", "-E" },
      commands = <83>{},
      commands_created = false,
      document_config = {
        commands = <table 83>,
        default_config = {
          filetypes = <84>{ "lua" },
          log_level = 2,
          root_dir = <function 1510>,
          settings = {
            Lua = {
              telemetry = {
                enable = false
              }
            }
          }
        },
        docs = {
          default_config = {
            root_dir = 'root_pattern(".git") or bufdir'
          },
          description = "https://github.com/sumneko/lua-language-server\n\nLua language server.\n\n`lua-language-server` can be installed by following the instructions [here](https://github.com/sumneko/lua-language-server/wiki/Build-and-Run-(Standalone)).\n\n**By default, lua-language-server doesn't have a `cmd` set.** This is because nvim-lspconfig does not make assumptions about your path. You must add the following to your init.vim or init.lua to set `cmd` to the absolute path ($HOME and ~ are not expanded) of your unzipped and compiled lua-language-server.\n\n```lua\nlocal system_name\nif vim.fn.has(\"mac\") == 1 then\n  system_name = \"macOS\"\nelseif vim.fn.has(\"unix\") == 1 then\n  system_name = \"Linux\"\nelseif vim.fn.has('win32') == 1 then\n  system_name = \"Windows\"\nelse\n  print(\"Unsupported system for sumneko\")\nend\n\n-- set the path to the sumneko installation; if you previously installed via the now deprecated :LspInstall, use\nlocal sumneko_root_path = vim.fn.stdpath('cache')..'/lspconfig/sumneko_lua/lua-language-server'\nlocal sumneko_binary = sumneko_root_path..\"/bin/\"..system_name..\"/lua-language-server\"\n\nlocal runtime_path = vim.split(package.path, ';')\ntable.insert(runtime_path, \"lua/?.lua\")\ntable.insert(runtime_path, \"lua/?/init.lua\")\n\nrequire'lspconfig'.sumneko_lua.setup {\n  cmd = {sumneko_binary, \"-E\", sumneko_root_path .. \"/main.lua\"};\n  settings = {\n    Lua = {\n      runtime = {\n        -- Tell the language server which version of Lua you're using (most likely LuaJIT in the case of Neovim)\n        version = 'LuaJIT',\n        -- Setup your lua path\n        path = runtime_path,\n      },\n      diagnostics = {\n        -- Get the language server to recognize the `vim` global\n        globals = {'vim'},\n      },\n      workspace = {\n        -- Make the server aware of Neovim runtime files\n        library = vim.api.nvim_get_runtime_file(\"\", true),\n      },\n      -- Do not send telemetry data containing a randomized but unique identifier\n      telemetry = {\n        enable = false,\n      },\n    },\n  },\n}\n```\n",
          package_json = "https://raw.githubusercontent.com/sumneko/vscode-lua/master/package.json"
        }
      },
      filetypes = <table 84>,
      get_root_dir = <function 1511>,
      handlers = <table 68>,
      make_config = <function 1512>,
      manager = {
        add = <function 1513>,
        clients = <function 1514>,
        try_add = <function 1515>,
        try_add_wrapper = <function 1516>
      },
      name = "sumneko_lua",
      setup = <function 1517>
    },
    tsserver = {
      _autostart = true,
      _setup_buffer = <function 1518>,
      autostart = <function 1519>,
      cmd = <85>{ "typescript-language-server", "--stdio" },
      commands = <86>{},
      commands_created = false,
      document_config = {
        commands = <table 86>,
        default_config = {
          cmd = <table 85>,
          filetypes = <87>{ "javascript", "javascriptreact", "javascript.jsx", "typescript", "typescriptreact", "typescript.tsx" },
          init_options = {
            hostInfo = "neovim"
          },
          root_dir = <function 1520>
        },
        docs = {
          default_config = {
            root_dir = 'root_pattern("package.json", "tsconfig.json", "jsconfig.json", ".git")'
          },
          description = "https://github.com/theia-ide/typescript-language-server\n\n`typescript-language-server` depends on `typescript`. Both packages can be installed via `npm`:\n```sh\nnpm install -g typescript typescript-language-server\n```\n"
        }
      },
      filetypes = <table 87>,
      get_root_dir = <function 1521>,
      handlers = <table 68>,
      make_config = <function 1522>,
      manager = {
        add = <function 1523>,
        clients = <function 1524>,
        try_add = <function 1525>,
        try_add_wrapper = <function 1526>
      },
      name = "tsserver",
      setup = <function 1527>
    },
    <metatable> = {
      __newindex = <function 1528>
    }
  },
  ["lspconfig/util"] = <table 67>,
  lspkind = {
    init = <function 1529>,
    presets = {
      codicons = {
        Class = "",
        Color = "",
        Constant = "",
        Constructor = "",
        Enum = "",
        EnumMember = "",
        Event = "",
        Field = "",
        File = "",
        Folder = "",
        Function = "",
        Interface = "",
        Keyword = "",
        Method = "",
        Module = "",
        Operator = "",
        Property = "",
        Reference = "",
        Snippet = "",
        Struct = "",
        Text = "",
        TypeParameter = "",
        Unit = "",
        Value = "",
        Variable = ""
      },
      default = {
        Class = "ﴯ",
        Color = "",
        Constant = "",
        Constructor = "",
        Enum = "",
        EnumMember = "",
        Event = "",
        Field = "ﰠ",
        File = "",
        Folder = "",
        Function = "",
        Interface = "",
        Keyword = "",
        Method = "",
        Module = "",
        Operator = "",
        Property = "ﰠ",
        Reference = "",
        Snippet = "",
        Struct = "פּ",
        Text = "",
        TypeParameter = "",
        Unit = "塞",
        Value = "",
        Variable = ""
      }
    }
  },
  luv = <table 33>,
  math = <table 24>,
  ["neovim_configuration.bindings"] = true,
  ["neovim_configuration.opts"] = true,
  ["neovim_configuration.plugin_manager"] = true,
  ["neovim_configuration.theme"] = <88>{
    alt_bg = {
      cterm = "242",
      gui = "#24292e"
    },
    bg = {
      cterm = "242",
      gui = "#24292e"
    },
    error = {
      cterm = "15",
      gui = "#f97583"
    },
    fg = {
      cterm = "0",
      gui = "#c9d1d9"
    },
    gitsigns_add_text = "+",
    gitsigns_change_text = "~",
    gitsigns_changedelete_text = "~",
    gitsigns_delete_text = "-",
    gitsigns_topdelete_text = "^",
    hint = {
      cterm = "224",
      gui = "#79b8ff"
    },
    info = {
      cterm = "0",
      gui = "#9ecbff"
    },
    warn = {
      cterm = "13",
      gui = "#79b8ff"
    }
  },
  ["neovim_configuration.themes.default"] = <table 88>,
  ["neovim_configuration.util"] = {
    file_exists = <function 1530>,
    get_color = <function 1531>,
    map = <function 1532>
  },
  ["nvim-autopairs"] = <table 4>,
  ["nvim-autopairs._log"] = {
    debug = <function 1533>,
    error = <function 1534>,
    info = <function 1535>
  },
  ["nvim-autopairs.conds"] = {
    after_regex_check = <function 1536>,
    after_text_check = <function 1537>,
    before_regex_check = <function 1538>,
    before_text_check = <function 1539>,
    check_is_bracket_line = <function 1540>,
    done = <function 1541>,
    invert = <function 1542>,
    is_end_line = <function 1543>,
    move_right = <function 1544>,
    none = <function 1545>,
    not_add_quote_inside_quote = <function 1546>,
    not_after_regex_check = <function 1547>,
    not_after_text_check = <function 1548>,
    not_before_regex_check = <function 1549>,
    not_before_text_check = <function 1550>,
    not_filetypes = <function 1551>,
    not_inside_quote = <function 1552>
  },
  ["nvim-autopairs.rule"] = <function 56>,
  ["nvim-autopairs.rules.basic"] = {
    setup = <function 1553>
  },
  ["nvim-autopairs.utils"] = {
    check_disable_ft = <function 1554>,
    check_filetype = <function 1555>,
    esc = <function 97>,
    feed = <function 1556>,
    get_cursor = <function 1557>,
    get_prev_char = <function 1558>,
    insert_char = <function 1559>,
    is_attached = <function 1560>,
    is_bracket = <function 1561>,
    is_close_bracket = <function 1562>,
    is_equal = <function 1563>,
    is_in_quote = <function 1564>,
    is_in_range = <function 1565>,
    is_in_table = <function 1566>,
    is_quote = <function 1567>,
    key = {
      bs = "<bs>",
      del = "<del>",
      join_left = "<c-g>U<left>",
      join_right = "<c-g>U<right>",
      left = "<left>",
      right = "<right>"
    },
    repeat_key = <function 1568>,
    set_attach = <function 1569>,
    set_vchar = <function 1570>,
    text_cusor_line = <function 1571>,
    text_get_current_line = <function 1572>,
    text_get_line = <function 1573>,
    text_sub_char = <function 1574>
  },
  ["nvim-treesitter"] = {
    define_modules = <function 1575>,
    setup = <function 1576>,
    statusline = <function 1577>
  },
  ["nvim-treesitter.caching"] = {
    create_buffer_cache = <function 1578>
  },
  ["nvim-treesitter.configs"] = {
    attach_module = <function 1579>,
    available_modules = <function 1580>,
    commands = {
      TSBufDisable = {
        args = { "-nargs=1", "-complete=custom,nvim_treesitter#available_modules" },
        run = <function 1581>
      },
      TSBufEnable = {
        args = { "-nargs=1", "-complete=custom,nvim_treesitter#available_modules" },
        run = <function 1582>
      },
      TSBufToggle = {
        args = { "-nargs=1", "-complete=custom,nvim_treesitter#available_modules" },
        run = <function 1583>
      },
      TSConfigInfo = {
        args = { "-nargs=0" },
        run = <function 1584>
      },
      TSDisableAll = {
        args = { "-nargs=+", "-complete=custom,nvim_treesitter#available_modules" },
        run = <function 1585>
      },
      TSEditQuery = {
        args = { "-nargs=+", "-complete=custom,nvim_treesitter#available_query_groups" },
        run = <function 1586>
      },
      TSEditQueryUserAfter = {
        args = { "-nargs=+", "-complete=custom,nvim_treesitter#available_query_groups" },
        run = <function 1587>
      },
      TSEnableAll = {
        args = { "-nargs=+", "-complete=custom,nvim_treesitter#available_modules" },
        run = <function 1588>
      },
      TSToggleAll = {
        args = { "-nargs=+", "-complete=custom,nvim_treesitter#available_modules" },
        run = <function 1589>
      }
    },
    define_modules = <function 1590>,
    detach_module = <function 1591>,
    edit_query_file = <function 1586>,
    edit_query_file_user_after = <function 1587>,
    get_ignored_parser_installs = <function 1592>,
    get_module = <function 1593>,
    get_update_strategy = <function 1594>,
    init = <function 1595>,
    is_enabled = <function 1596>,
    is_module = <function 1597>,
    reattach_module = <function 1598>,
    setup = <function 1599>
  },
  ["nvim-treesitter.highlight"] = {
    attach = <function 1600>,
    detach = <function 1601>
  },
  ["nvim-treesitter.info"] = {
    commands = {
      TSInstallInfo = {
        args = { "-nargs=0" },
        run = <function 1602>
      },
      TSModuleInfo = {
        args = { "-nargs=?", "-complete=custom,nvim_treesitter#available_modules" },
        run = <function 1603>
      }
    },
    installed_parsers = <function 1604>
  },
  ["nvim-treesitter.install"] = {
    commands = {
      TSInstall = {
        args = { "-nargs=+", "-bang", "-complete=custom,nvim_treesitter#installable_parsers" },
        run = <function 1605>,
        ["run!"] = <function 1606>
      },
      TSInstallFromGrammar = {
        args = { "-nargs=+", "-bang", "-complete=custom,nvim_treesitter#installable_parsers" },
        run = <function 1607>,
        ["run!"] = <function 1608>
      },
      TSInstallSync = {
        args = { "-nargs=+", "-bang", "-complete=custom,nvim_treesitter#installable_parsers" },
        run = <function 1609>,
        ["run!"] = <function 1610>
      },
      TSUninstall = {
        args = { "-nargs=+", "-complete=custom,nvim_treesitter#installed_parsers" },
        run = <function 1611>
      },
      TSUpdate = {
        args = { "-nargs=*", "-complete=custom,nvim_treesitter#installed_parsers" },
        run = <function 1612>
      },
      TSUpdateSync = {
        args = { "-nargs=*", "-complete=custom,nvim_treesitter#installed_parsers" },
        run = <function 1613>
      }
    },
    compilers = { vim.NIL, "cc", "gcc", "clang", "cl" },
    ensure_installed = <function 1614>,
    iter_cmd = <function 1615>,
    uninstall = <function 1611>,
    update = <function 1616>,
    write_lockfile = <function 1617>
  },
  ["nvim-treesitter.locals"] = {
    collect_locals = <function 1618>,
    containing_scope = <function 1619>,
    find_definition = <function 1620>,
    find_usages = <function 1621>,
    get_definition_id = <function 1622>,
    get_definition_scopes = <function 1623>,
    get_definitions = <function 1624>,
    get_definitions_lookup_table = <function 1625>,
    get_local_nodes = <function 1626>,
    get_locals = <function 1627>,
    get_references = <function 1628>,
    get_scope_tree = <function 1629>,
    get_scopes = <function 1630>,
    iter_locals = <function 1631>,
    iter_scope_tree = <function 1632>,
    nested_scope = <function 1633>,
    next_scope = <function 1634>,
    previous_scope = <function 1635>,
    recurse_local_nodes = <function 1636>
  },
  ["nvim-treesitter.parsers"] = {
    available_parsers = <function 1637>,
    ft_to_lang = <function 1638>,
    get_buf_lang = <function 1639>,
    get_parser = <function 1640>,
    get_parser_configs = <function 1641>,
    get_tree_root = <function 1642>,
    has_parser = <function 1643>,
    list = {
      bash = {
        filetype = "sh",
        install_info = {
          files = { "src/parser.c", "src/scanner.cc" },
          url = "https://github.com/tree-sitter/tree-sitter-bash"
        },
        maintainers = { "@TravonteD" },
        used_by = { "zsh", "PKGBUILD" },
        <metatable> = {
          __newindex = <function 1644>
        }
      },
      beancount = {
        install_info = {
          branch = "master",
          files = { "src/parser.c" },
          url = "https://github.com/polarmutex/tree-sitter-beancount"
        },
        maintainers = { "@polarmutex" },
        <metatable> = {
          __newindex = <function 1645>
        }
      },
      bibtex = {
        filetype = "bib",
        install_info = {
          files = { "src/parser.c" },
          url = "https://github.com/latex-lsp/tree-sitter-bibtex"
        },
        maintainers = { "@theHamsta by asking @clason" },
        <metatable> = {
          __newindex = <function 1646>
        }
      },
      c = {
        install_info = {
          files = { "src/parser.c" },
          url = "https://github.com/tree-sitter/tree-sitter-c"
        },
        maintainers = { "@vigoux" },
        <metatable> = {
          __newindex = <function 1647>
        }
      },
      c_sharp = {
        filetype = "cs",
        install_info = {
          files = { "src/parser.c", "src/scanner.c" },
          url = "https://github.com/tree-sitter/tree-sitter-c-sharp"
        },
        maintainers = { "@Luxed" },
        <metatable> = {
          __newindex = <function 1648>
        }
      },
      clojure = {
        install_info = {
          files = { "src/parser.c" },
          url = "https://github.com/sogaiu/tree-sitter-clojure"
        },
        maintainers = { "@sogaiu" },
        <metatable> = {
          __newindex = <function 1649>
        }
      },
      cmake = {
        install_info = {
          files = { "src/parser.c", "src/scanner.cc" },
          url = "https://github.com/uyha/tree-sitter-cmake"
        },
        maintainers = { "@uyha" },
        <metatable> = {
          __newindex = <function 1650>
        }
      },
      comment = {
        install_info = {
          files = { "src/parser.c", "src/scanner.c" },
          url = "https://github.com/stsewd/tree-sitter-comment"
        },
        maintainers = { "@stsewd" },
        <metatable> = {
          __newindex = <function 1651>
        }
      },
      commonlisp = {
        filetype = "lisp",
        install_info = {
          files = { "src/parser.c" },
          generate_requires_npm = true,
          url = "https://github.com/theHamsta/tree-sitter-commonlisp"
        },
        maintainers = { "@theHamsta" },
        <metatable> = {
          __newindex = <function 1652>
        }
      },
      cpp = {
        install_info = {
          files = { "src/parser.c", "src/scanner.cc" },
          generate_requires_npm = true,
          url = "https://github.com/tree-sitter/tree-sitter-cpp"
        },
        maintainers = { "@theHamsta" },
        <metatable> = {
          __newindex = <function 1653>
        }
      },
      css = {
        install_info = {
          files = { "src/parser.c", "src/scanner.c" },
          url = "https://github.com/tree-sitter/tree-sitter-css"
        },
        maintainers = { "@TravonteD" },
        <metatable> = {
          __newindex = <function 1654>
        }
      },
      cuda = {
        install_info = {
          files = { "src/parser.c", "src/scanner.cc" },
          generate_requires_npm = true,
          url = "https://github.com/theHamsta/tree-sitter-cuda"
        },
        maintainers = { "@theHamsta" },
        <metatable> = {
          __newindex = <function 1655>
        }
      },
      dart = {
        install_info = {
          files = { "src/parser.c", "src/scanner.c" },
          url = "https://github.com/UserNobody14/tree-sitter-dart"
        },
        maintainers = { "@Akin909" },
        <metatable> = {
          __newindex = <function 1656>
        }
      },
      devicetree = {
        filetype = "dts",
        install_info = {
          branch = "main",
          files = { "src/parser.c" },
          requires_generate_from_grammar = true,
          url = "https://github.com/joelspadin/tree-sitter-devicetree"
        },
        maintainers = { "@jedrzejboczar" },
        <metatable> = {
          __newindex = <function 1657>
        }
      },
      dockerfile = {
        install_info = {
          branch = "main",
          files = { "src/parser.c" },
          url = "https://github.com/camdencheek/tree-sitter-dockerfile"
        },
        maintainers = { "@camdencheek" },
        <metatable> = {
          __newindex = <function 1658>
        }
      },
      elixir = {
        install_info = {
          files = { "src/parser.c", "src/scanner.cc" },
          requires_generate_from_grammar = true,
          url = "https://github.com/ananthakumaran/tree-sitter-elixir"
        },
        maintainers = { "@nifoc" },
        <metatable> = {
          __newindex = <function 1659>
        }
      },
      elm = {
        install_info = {
          files = { "src/parser.c", "src/scanner.cc" },
          url = "https://github.com/elm-tooling/tree-sitter-elm"
        },
        <metatable> = {
          __newindex = <function 1660>
        }
      },
      erlang = {
        install_info = {
          branch = "main",
          files = { "src/parser.c" },
          url = "https://github.com/AbstractMachinesLab/tree-sitter-erlang"
        },
        maintainers = { "@ostera" },
        <metatable> = {
          __newindex = <function 1661>
        }
      },
      fennel = {
        install_info = {
          files = { "src/parser.c", "src/scanner.c" },
          url = "https://github.com/travonted/tree-sitter-fennel"
        },
        maintainers = { "@TravonteD" },
        <metatable> = {
          __newindex = <function 1662>
        }
      },
      fish = {
        install_info = {
          files = { "src/parser.c", "src/scanner.c" },
          url = "https://github.com/ram02z/tree-sitter-fish"
        },
        maintainers = { "@ram02z" },
        <metatable> = {
          __newindex = <function 1663>
        }
      },
      fortran = {
        install_info = {
          files = { "src/parser.c", "src/scanner.cc" },
          url = "https://github.com/stadelmanma/tree-sitter-fortran"
        },
        <metatable> = {
          __newindex = <function 1664>
        }
      },
      gdscript = {
        install_info = {
          files = { "src/parser.c", "src/scanner.cc" },
          requires_generate_from_grammar = true,
          url = "https://github.com/PrestonKnopp/tree-sitter-gdscript"
        },
        maintainers = { "@Shatur95" },
        readme_name = "Godot (gdscript)",
        <metatable> = {
          __newindex = <function 1665>
        }
      },
      glimmer = {
        filetype = "handlebars",
        install_info = {
          branch = "main",
          files = { "src/parser.c", "src/scanner.c" },
          url = "https://github.com/alexlafroscia/tree-sitter-glimmer"
        },
        maintainers = { "@alexlafroscia" },
        readme_name = "Glimmer and Ember",
        <metatable> = {
          __newindex = <function 1666>
        }
      },
      go = {
        install_info = {
          files = { "src/parser.c" },
          url = "https://github.com/tree-sitter/tree-sitter-go"
        },
        maintainers = { "@theHamsta", "@WinWisely268" },
        <metatable> = {
          __newindex = <function 1667>
        }
      },
      godotResource = {
        filetype = "gdresource",
        install_info = {
          files = { "src/parser.c", "src/scanner.c" },
          requires_generate_from_grammar = true,
          url = "https://github.com/PrestonKnopp/tree-sitter-godot-resource"
        },
        maintainers = { "@pierpo" },
        readme_name = "Godot Resources (gdresource)",
        <metatable> = {
          __newindex = <function 1668>
        }
      },
      gomod = {
        filetype = "gomod",
        install_info = {
          branch = "main",
          files = { "src/parser.c" },
          url = "https://github.com/camdencheek/tree-sitter-go-mod"
        },
        maintainers = { "@camdencheek" },
        <metatable> = {
          __newindex = <function 1669>
        }
      },
      graphql = {
        install_info = {
          files = { "src/parser.c" },
          url = "https://github.com/bkegley/tree-sitter-graphql"
        },
        maintainers = { "@bkegley" },
        <metatable> = {
          __newindex = <function 1670>
        }
      },
      haskell = {
        install_info = {
          files = { "src/parser.c", "src/scanner.cc" },
          url = "https://github.com/tree-sitter/tree-sitter-haskell"
        },
        <metatable> = {
          __newindex = <function 1671>
        }
      },
      hcl = {
        filetype = "hcl",
        install_info = {
          branch = "main",
          files = { "src/parser.c", "src/scanner.cc" },
          url = "https://github.com/MichaHoffmann/tree-sitter-hcl"
        },
        maintainers = { "@MichaHoffmann" },
        used_by = { "terraform" },
        <metatable> = {
          __newindex = <function 1672>
        }
      },
      heex = {
        filetype = "heex",
        install_info = {
          branch = "main",
          files = { "src/parser.c" },
          url = "https://github.com/connorlay/tree-sitter-heex"
        },
        maintainers = { "@connorlay" },
        <metatable> = {
          __newindex = <function 1673>
        }
      },
      html = {
        install_info = {
          files = { "src/parser.c", "src/scanner.cc" },
          url = "https://github.com/tree-sitter/tree-sitter-html"
        },
        maintainers = { "@TravonteD" },
        used_by = { "html_tags" },
        <metatable> = {
          __newindex = <function 1674>
        }
      },
      java = {
        install_info = {
          files = { "src/parser.c" },
          url = "https://github.com/tree-sitter/tree-sitter-java"
        },
        maintainers = { "@p00f" },
        <metatable> = {
          __newindex = <function 1675>
        }
      },
      javascript = {
        install_info = {
          files = { "src/parser.c", "src/scanner.c" },
          url = "https://github.com/tree-sitter/tree-sitter-javascript"
        },
        maintainers = { "@steelsojka" },
        used_by = { "javascriptreact", "ecma" },
        <metatable> = {
          __newindex = <function 1676>
        }
      },
      jsdoc = {
        install_info = {
          files = { "src/parser.c" },
          url = "https://github.com/tree-sitter/tree-sitter-jsdoc"
        },
        maintainers = { "@steelsojka" },
        <metatable> = {
          __newindex = <function 1677>
        }
      },
      json = {
        install_info = {
          files = { "src/parser.c" },
          url = "https://github.com/tree-sitter/tree-sitter-json"
        },
        maintainers = { "@steelsojka" },
        <metatable> = {
          __newindex = <function 1678>
        }
      },
      jsonc = {
        install_info = {
          files = { "src/parser.c" },
          generate_requires_npm = true,
          url = "https://gitlab.com/WhyNotHugo/tree-sitter-jsonc.git"
        },
        maintainers = { "@WhyNotHugo" },
        readme_name = "JSON with comments",
        <metatable> = {
          __newindex = <function 1679>
        }
      },
      julia = {
        install_info = {
          files = { "src/parser.c", "src/scanner.c" },
          url = "https://github.com/tree-sitter/tree-sitter-julia"
        },
        maintainers = { "@mroavi", "@theHamsta" },
        <metatable> = {
          __newindex = <function 1680>
        }
      },
      kotlin = {
        install_info = {
          files = { "src/parser.c" },
          url = "https://github.com/tormodatt/tree-sitter-kotlin"
        },
        maintainers = { "@tormodatt" },
        <metatable> = {
          __newindex = <function 1681>
        }
      },
      latex = {
        filetype = "tex",
        install_info = {
          files = { "src/parser.c" },
          url = "https://github.com/latex-lsp/tree-sitter-latex"
        },
        maintainers = { "@theHamsta by asking @clason" },
        used_by = { "cls", "sty" },
        <metatable> = {
          __newindex = <function 1682>
        }
      },
      ledger = {
        install_info = {
          files = { "src/parser.c" },
          url = "https://github.com/cbarrete/tree-sitter-ledger"
        },
        maintainers = { "@cbarrete" },
        <metatable> = {
          __newindex = <function 1683>
        }
      },
      lua = {
        install_info = {
          files = { "src/parser.c", "src/scanner.cc" },
          url = "https://github.com/nvim-treesitter/tree-sitter-lua"
        },
        maintainers = { "@vigoux" },
        <metatable> = {
          __newindex = <function 1684>
        }
      },
      nix = {
        install_info = {
          files = { "src/parser.c", "src/scanner.c" },
          url = "https://github.com/cstrahan/tree-sitter-nix"
        },
        maintainers = { "@leo60228" },
        <metatable> = {
          __newindex = <function 1685>
        }
      },
      ocaml = {
        install_info = {
          files = { "src/parser.c", "src/scanner.cc" },
          location = "tree-sitter-ocaml/ocaml",
          url = "https://github.com/tree-sitter/tree-sitter-ocaml"
        },
        maintainers = { "@undu" },
        <metatable> = {
          __newindex = <function 1686>
        }
      },
      ocaml_interface = {
        filetype = "ocamlinterface",
        install_info = {
          files = { "src/parser.c", "src/scanner.cc" },
          location = "tree-sitter-ocaml_interface/interface",
          url = "https://github.com/tree-sitter/tree-sitter-ocaml"
        },
        maintainers = { "@undu" },
        <metatable> = {
          __newindex = <function 1687>
        }
      },
      ocamllex = {
        install_info = {
          files = { "src/parser.c", "src/scanner.cc" },
          requires_generate_from_grammar = true,
          url = "https://github.com/atom-ocaml/tree-sitter-ocamllex"
        },
        maintainers = { "@undu" },
        <metatable> = {
          __newindex = <function 1688>
        }
      },
      php = {
        install_info = {
          files = { "src/parser.c", "src/scanner.cc" },
          url = "https://github.com/tree-sitter/tree-sitter-php"
        },
        maintainers = { "@tk-shirasaka" },
        <metatable> = {
          __newindex = <function 1689>
        }
      },
      python = {
        install_info = {
          files = { "src/parser.c", "src/scanner.cc" },
          url = "https://github.com/tree-sitter/tree-sitter-python"
        },
        maintainers = { "@stsewd", "@theHamsta" },
        <metatable> = {
          __newindex = <function 1690>
        }
      },
      ql = {
        install_info = {
          files = { "src/parser.c" },
          url = "https://github.com/tree-sitter/tree-sitter-ql"
        },
        maintainers = { "@pwntester" },
        <metatable> = {
          __newindex = <function 1691>
        }
      },
      query = {
        install_info = {
          files = { "src/parser.c" },
          url = "https://github.com/nvim-treesitter/tree-sitter-query"
        },
        maintainers = { "@steelsojka" },
        readme_name = "Tree-sitter query language",
        <metatable> = {
          __newindex = <function 1692>
        }
      },
      r = {
        install_info = {
          files = { "src/parser.c" },
          url = "https://github.com/r-lib/tree-sitter-r"
        },
        maintainers = { "@jimhester" },
        <metatable> = {
          __newindex = <function 1693>
        }
      },
      regex = {
        install_info = {
          files = { "src/parser.c" },
          url = "https://github.com/tree-sitter/tree-sitter-regex"
        },
        maintainers = { "@theHamsta" },
        <metatable> = {
          __newindex = <function 1694>
        }
      },
      rst = {
        install_info = {
          files = { "src/parser.c", "src/scanner.c" },
          url = "https://github.com/stsewd/tree-sitter-rst"
        },
        maintainers = { "@stsewd" },
        <metatable> = {
          __newindex = <function 1695>
        }
      },
      ruby = {
        install_info = {
          files = { "src/parser.c", "src/scanner.cc" },
          url = "https://github.com/tree-sitter/tree-sitter-ruby"
        },
        maintainers = { "@TravonteD" },
        <metatable> = {
          __newindex = <function 1696>
        }
      },
      rust = {
        install_info = {
          files = { "src/parser.c", "src/scanner.c" },
          url = "https://github.com/tree-sitter/tree-sitter-rust"
        },
        maintainers = { "@vigoux" },
        <metatable> = {
          __newindex = <function 1697>
        }
      },
      scala = {
        install_info = {
          files = { "src/parser.c", "src/scanner.c" },
          url = "https://github.com/tree-sitter/tree-sitter-scala"
        },
        <metatable> = {
          __newindex = <function 1698>
        }
      },
      scss = {
        install_info = {
          files = { "src/parser.c", "src/scanner.c" },
          url = "https://github.com/serenadeai/tree-sitter-scss"
        },
        maintainers = { "@elianiva" },
        <metatable> = {
          __newindex = <function 1699>
        }
      },
      sparql = {
        install_info = {
          branch = "main",
          files = { "src/parser.c" },
          url = "https://github.com/BonaBeavis/tree-sitter-sparql"
        },
        maintainers = { "@bonabeavis" },
        <metatable> = {
          __newindex = <function 1700>
        }
      },
      supercollider = {
        filetype = "supercollider",
        install_info = {
          branch = "main",
          files = { "src/parser.c", "src/scanner.c" },
          url = "https://github.com/madskjeldgaard/tree-sitter-supercollider"
        },
        maintainers = { "@madskjeldgaard" },
        <metatable> = {
          __newindex = <function 1701>
        }
      },
      surface = {
        filetype = "sface",
        install_info = {
          branch = "main",
          files = { "src/parser.c" },
          url = "https://github.com/connorlay/tree-sitter-surface"
        },
        maintainers = { "@connorlay" },
        <metatable> = {
          __newindex = <function 1702>
        }
      },
      svelte = {
        install_info = {
          branch = "master",
          files = { "src/parser.c", "src/scanner.c" },
          url = "https://github.com/Himujjal/tree-sitter-svelte"
        },
        maintainers = { "@elianiva" },
        <metatable> = {
          __newindex = <function 1703>
        }
      },
      swift = {
        install_info = {
          files = { "src/parser.c" },
          requires_generate_from_grammar = true,
          url = "https://github.com/tree-sitter/tree-sitter-swift"
        },
        <metatable> = {
          __newindex = <function 1704>
        }
      },
      teal = {
        install_info = {
          files = { "src/parser.c", "src/scanner.c" },
          requires_generate_from_grammar = true,
          url = "https://github.com/euclidianAce/tree-sitter-teal"
        },
        maintainers = { "@euclidianAce" },
        <metatable> = {
          __newindex = <function 1705>
        }
      },
      toml = {
        install_info = {
          files = { "src/parser.c", "src/scanner.c" },
          generate_requires_npm = true,
          url = "https://github.com/ikatyang/tree-sitter-toml"
        },
        maintainers = { "@tk-shirasaka" },
        <metatable> = {
          __newindex = <function 1706>
        }
      },
      tsx = {
        filetype = "typescriptreact",
        install_info = {
          files = { "src/parser.c", "src/scanner.c" },
          generate_requires_npm = true,
          location = "tree-sitter-tsx/tsx",
          url = "https://github.com/tree-sitter/tree-sitter-typescript"
        },
        maintainers = { "@steelsojka" },
        used_by = { "typescript.tsx" },
        <metatable> = {
          __newindex = <function 1707>
        }
      },
      turtle = {
        install_info = {
          branch = "main",
          files = { "src/parser.c" },
          url = "https://github.com/BonaBeavis/tree-sitter-turtle"
        },
        maintainers = { "@bonabeavis" },
        <metatable> = {
          __newindex = <function 1708>
        }
      },
      typescript = {
        install_info = {
          files = { "src/parser.c", "src/scanner.c" },
          generate_requires_npm = true,
          location = "tree-sitter-typescript/typescript",
          url = "https://github.com/tree-sitter/tree-sitter-typescript"
        },
        maintainers = { "@steelsojka" },
        <metatable> = {
          __newindex = <function 1709>
        }
      },
      verilog = {
        install_info = {
          files = { "src/parser.c" },
          generate_requires_npm = true,
          url = "https://github.com/tree-sitter/tree-sitter-verilog"
        },
        maintainers = { "@zegervdv" },
        used_by = { "systemverilog" },
        <metatable> = {
          __newindex = <function 1710>
        }
      },
      vim = {
        filetype = "vim",
        install_info = {
          files = { "src/parser.c", "src/scanner.c" },
          url = "https://github.com/vigoux/tree-sitter-viml"
        },
        maintainers = { "@vigoux" },
        <metatable> = {
          __newindex = <function 1711>
        }
      },
      vue = {
        install_info = {
          files = { "src/parser.c", "src/scanner.cc" },
          url = "https://github.com/ikatyang/tree-sitter-vue"
        },
        maintainers = { "@WhyNotHugo" },
        <metatable> = {
          __newindex = <function 1712>
        }
      },
      yaml = {
        install_info = {
          files = { "src/parser.c", "src/scanner.cc" },
          url = "https://github.com/ikatyang/tree-sitter-yaml"
        },
        maintainers = { "@stsewd" },
        <metatable> = {
          __newindex = <function 1713>
        }
      },
      yang = {
        filetype = "yang",
        install_info = {
          files = { "src/parser.c" },
          url = "https://github.com/Hubro/tree-sitter-yang"
        },
        maintainers = { "@Hubro" },
        <metatable> = {
          __newindex = <function 1714>
        }
      },
      zig = {
        filetype = "zig",
        install_info = {
          branch = "main",
          files = { "src/parser.c" },
          url = "https://github.com/maxxnino/tree-sitter-zig"
        },
        maintainers = { "@maxxnino" },
        <metatable> = {
          __newindex = <function 1715>
        }
      },
      <metatable> = {
        __newindex = <function 1716>
      }
    },
    maintained_parsers = <function 1717>,
    reset_cache = <function 1718>
  },
  ["nvim-treesitter.query"] = {
    available_query_groups = <function 1719>,
    built_in_query_groups = { "highlights", "locals", "folds", "indents", "injections" },
    collect_group_results = <function 1720>,
    find_best_match = <function 1721>,
    get_capture_matches = <function 1722>,
    get_capture_matches_recursively = <function 1723>,
    get_matches = <function 1724>,
    get_query = <function 1725>,
    has_folds = <function 1726>,
    has_highlights = <function 1727>,
    has_indents = <function 1728>,
    has_injections = <function 1729>,
    has_locals = <function 1730>,
    has_query_files = <function 1731>,
    invalidate_query_cache = <function 1732>,
    invalidate_query_file = <function 1733>,
    iter_group_results = <function 1734>,
    iter_prepared_matches = <function 1735>
  },
  ["nvim-treesitter.query_predicates"] = true,
  ["nvim-treesitter.shell_command_selectors"] = {
    make_directory_change_for_command = <function 1736>,
    select_compiler_args = <function 1737>,
    select_download_commands = <function 1738>,
    select_executable = <function 1739>,
    select_install_rm_cmd = <function 1740>,
    select_mkdir_cmd = <function 1741>,
    select_mv_cmd = <function 1742>,
    select_rm_file_cmd = <function 1743>
  },
  ["nvim-treesitter.ts_utils"] = {
    get_named_children = <function 1744>,
    get_next_node = <function 1745>,
    get_node_at_cursor = <function 1746>,
    get_node_range = <function 1747>,
    get_node_text = <function 1748>,
    get_previous_node = <function 1749>,
    get_root_for_node = <function 1750>,
    get_root_for_position = <function 1751>,
    goto_node = <function 1752>,
    highlight_node = <function 1753>,
    highlight_range = <function 1754>,
    is_in_node_range = <function 1755>,
    is_parent = <function 1756>,
    memoize_by_buf_tick = <function 1757>,
    node_length = <function 1758>,
    node_to_lsp_range = <function 1759>,
    swap_nodes = <function 1760>,
    update_selection = <function 1761>
  },
  ["nvim-treesitter.tsrange"] = {
    TSRange = <89>{
      __index = <table 89>,
      child = <function 1762>,
      child_count = <function 1763>,
      collect_children = <function 1764>,
      end_ = <function 1765>,
      field = <function 1766>,
      from_nodes = <function 1767>,
      from_table = <function 1768>,
      has_error = <function 1769>,
      iter_children = <function 1770>,
      missing = <function 1771>,
      named = <function 1772>,
      named_child = <function 1773>,
      named_child_count = <function 1774>,
      new = <function 1775>,
      parent = <function 1776>,
      range = <function 1777>,
      sexpr = <function 1778>,
      start = <function 1779>,
      symbol = <function 1780>,
      type = <function 1781>
    }
  },
  ["nvim-treesitter.utils"] = {
    constant = <function 1782>,
    difference = <function 1783>,
    filter = <function 1784>,
    generate_join = <function 1785>,
    get_at_path = <function 1786>,
    get_cache_dir = <function 1787>,
    get_package_path = <function 1788>,
    get_parser_info_dir = <function 1789>,
    get_parser_install_dir = <function 1790>,
    get_path_sep = <function 1791>,
    get_site_dir = <function 1792>,
    identity = <function 1793>,
    index_of = <function 1794>,
    join_path = <function 1795>,
    print_warning = <function 1796>,
    set_jump = <function 1797>,
    setup_commands = <function 1798>,
    to_func = <function 1799>
  },
  ["nvim-web-devicons"] = <table 58>,
  os = <table 25>,
  package = <table 26>,
  packer = {
    __manage_all = <function 1800>,
    clean = <function 1801>,
    compile = <function 1802>,
    config = {
      auto_clean = true,
      auto_reload_compiled = true,
      compile_on_sync = true,
      compile_path = "/home/a/.config/nvim/plugin/packer_compiled.lua",
      disable_commands = false,
      display = {
        done_sym = "✓",
        error_sym = "✗",
        header_lines = 2,
        header_sym = "━",
        keybindings = {
          diff = "d",
          prompt_revert = "r",
          quit = "q",
          toggle_info = "<CR>"
        },
        moved_sym = "→",
        non_interactive = false,
        open_cmd = "65vnew",
        prompt_border = "double",
        removed_sym = "-",
        show_all_info = true,
        title = "packer.nvim",
        working_sym = "⟳"
      },
      ensure_dependencies = true,
      git = {
        clone_timeout = 60,
        cmd = "git",
        default_url_format = "https://github.com/%s.git",
        depth = 1,
        mark_breaking_changes = true,
        subcommands = {
          checkout = "checkout %s --",
          current_branch = "rev-parse --abbrev-ref HEAD",
          diff = "log --color=never --pretty=format:FMT --no-show-signature HEAD@{1}...HEAD",
          diff_fmt = "%%h %%s (%%cr)",
          fetch = "fetch --depth 999999 --progress",
          get_bodies = 'log --color=never --pretty=format:"===COMMIT_START===%h%n%s===BODY_START===%b" --no-show-signature HEAD@{1}...HEAD',
          get_header = "log --color=never --pretty=format:FMT --no-show-signature HEAD -n 1",
          get_rev = "rev-parse --short HEAD",
          git_diff_fmt = "show --no-color --pretty=medium %s",
          install = "clone --depth %i --no-single-branch --progress",
          revert = "reset --hard HEAD@{1}",
          submodules = "submodule update --init --recursive --progress",
          update = "pull --ff-only --progress --rebase=false",
          update_branch = "merge --ff-only @{u}"
        }
      },
      log = {
        level = "warn"
      },
      luarocks = {
        python_cmd = "python"
      },
      opt_default = false,
      package_root = "/home/a/.local/share/nvim/site/pack",
      plugin_package = "packer",
      profile = {
        enable = false
      },
      transitive_disable = true,
      transitive_opt = true
    },
    init = <function 1803>,
    install = <function 1804>,
    loader = <function 1805>,
    loader_complete = <function 1806>,
    make_commands = <function 1807>,
    on_compile_done = <function 1808>,
    on_complete = <function 1809>,
    profile_output = <function 1810>,
    reset = <function 1811>,
    set_handler = <function 1812>,
    startup = <function 1813>,
    status = <function 1814>,
    sync = <function 1815>,
    update = <function 1816>,
    use = <function 1817>,
    use_rocks = <function 1818>
  },
  ["packer.async"] = {
    interruptible_wait_pool = <function 1819>,
    main = <function 1820>,
    sync = <function 1821>,
    wait = <function 137>,
    wait_all = <function 1822>,
    wait_pool = <function 1823>,
    wrap = <function 1824>
  },
  ["packer.jobs"] = {
    extend_output = <function 1825>,
    logging_callback = <function 1826>,
    output_table = <function 1827>,
    run = <function 1828>
  },
  ["packer.load"] = <function 1829>,
  ["packer.log"] = {
    cfg = <function 1830>,
    debug = <function 1831>,
    error = <function 1832>,
    fatal = <function 1833>,
    fmt_debug = <function 1834>,
    fmt_error = <function 1835>,
    fmt_fatal = <function 1836>,
    fmt_info = <function 1837>,
    fmt_trace = <function 1838>,
    fmt_warn = <function 1839>,
    info = <function 1840>,
    new = <function 1841>,
    trace = <function 1842>,
    warn = <function 1843>
  },
  ["packer.plugin_utils"] = {
    cfg = <function 1844>,
    custom_plugin_type = "custom",
    ensure_dirs = <function 1845>,
    find_missing_plugins = <function 1846>,
    get_fs_state = <function 1847>,
    git_plugin_type = "git",
    guess_dir_type = <function 1848>,
    guess_type = <function 1849>,
    helptags_stale = <function 1850>,
    list_installed_plugins = <function 1851>,
    load_plugin = <function 1852>,
    local_plugin_type = "local",
    post_update_hook = <function 1853>,
    update_helptags = <function 1854>,
    update_rplugins = <function 1855>
  },
  ["packer.result"] = {
    err = <function 1856>,
    ok = <function 1857>
  },
  ["packer.util"] = {
    deep_extend = <function 1858>,
    float = <function 1859>,
    get_plugin_full_name = <function 1860>,
    get_separator = <function 1861>,
    is_windows = false,
    join_paths = <function 1862>,
    map = <function 1863>,
    nonempty_or = <function 1864>,
    partition = <function 1865>
  },
  ["plenary.async.async"] = {
    get_leaf_function_argc = <function 1866>,
    is_leaf_function = <function 1867>,
    run = <function 1868>,
    void = <function 1869>,
    wrap = <function 1870>
  },
  ["plenary.async.control"] = {
    Condvar = <90>{
      __index = <table 90>,
      new = <function 1871>,
      notify_all = <function 1872>,
      notify_one = <function 1873>,
      wait = <function 105>
    },
    Semaphore = <91>{
      __index = <table 91>,
      acquire = <function 110>,
      new = <function 1874>
    },
    channel = {
      counter = <function 1875>,
      mpsc = <function 1876>,
      oneshot = <function 1877>
    }
  },
  ["plenary.async.structs"] = {
    Deque = <table 3>
  },
  ["plenary.async.util"] = {
    apcall = <function 1878>,
    block_on = <function 1879>,
    join = <function 1880>,
    protected = <function 1881>,
    run_all = <function 1882>,
    run_first = <function 106>,
    scheduler = <function 111>,
    sleep = <function 108>,
    will_block = <function 1883>
  },
  ["plenary.errors"] = {
    info_error = <function 1884>,
    traceback_error = <function 1885>
  },
  ["plenary.functional"] = {
    all = <function 1886>,
    any = <function 1887>,
    first = <function 1888>,
    if_nil = <function 1889>,
    join = <function 1890>,
    kv_map = <function 1891>,
    kv_pairs = <function 1892>,
    last = <function 1893>,
    partial = <function 1894>,
    second = <function 1895>,
    select_only = <function 1896>,
    third = <function 1897>
  },
  ["plenary.job"] = <92>{
    __index = <table 92>,
    _create_uv_options = <function 1898>,
    _execute = <function 1899>,
    _pipes_are_closed = <function 1900>,
    _prepare_pipes = <function 1901>,
    _reset = <function 1902>,
    _shutdown = <function 1903>,
    _stop = <function 1904>,
    add_on_exit_callback = <function 1905>,
    after = <function 1906>,
    after_failure = <function 1907>,
    after_success = <function 1908>,
    and_then = <function 1909>,
    and_then_on_failure = <function 1910>,
    and_then_on_failure_wrap = <function 1911>,
    and_then_on_success = <function 1912>,
    and_then_on_success_wrap = <function 1913>,
    and_then_wrap = <function 1914>,
    chain = <function 1915>,
    chain_status = <function 1916>,
    co_wait = <function 1917>,
    is_job = <function 1918>,
    join = <function 1919>,
    new = <function 1920>,
    pid = <function 1921>,
    result = <function 1922>,
    send = <function 1923>,
    shutdown = <function 1924>,
    start = <function 1925>,
    stderr_result = <function 1926>,
    sync = <function 1927>,
    wait = <function 1928>
  },
  ["plenary.tbl"] = {
    apply_defaults = <function 1929>,
    freeze = <function 1930>,
    pack = <function 1931>,
    unpack = <function 1932>
  },
  ["plenary.vararg"] = {
    rotate = <function 1933>
  },
  ["plenary.vararg.rotate"] = <function 1933>,
  string = <table 27>,
  surround = {
    load_autogroups = <function 1934>,
    repeat_last = <function 1935>,
    set_keymaps = <function 1936>,
    setup = <function 1937>,
    surround_add = <function 1938>,
    surround_add_operator_mode = <function 1939>,
    surround_delete = <function 1940>,
    surround_replace = <function 1941>,
    toggle_brackets = <function 1942>,
    toggle_quotes = <function 1943>
  },
  ["surround.parser"] = {
    get_surround_pair = <function 1944>
  },
  ["surround.utils"] = {
    get = <function 1945>,
    get_line_numbers_by_offset = <function 1946>,
    get_nth_element = <function 1947>,
    get_operator_pos = <function 1948>,
    get_visual_pos = <function 1949>,
    has_value = <function 1950>,
    load_keymaps = <function 1951>,
    quote = <function 1952>,
    table_keys = <function 1953>,
    tprint = <function 1954>,
    user_input = <function 1955>
  },
  table = <table 28>,
  ["vim.F"] = <table 29>,
  ["vim._meta"] = true,
  ["vim.highlight"] = <table 31>,
  ["vim.inspect"] = <table 32>,
  ["vim.lsp"] = <table 34>,
  ["vim.lsp.buf"] = <table 35>,
  ["vim.lsp.codelens"] = <table 36>,
  ["vim.lsp.diagnostic"] = <table 37>,
  ["vim.lsp.handlers"] = <table 38>,
  ["vim.lsp.log"] = {
    DEBUG = 1,
    ERROR = 4,
    INFO = 2,
    TRACE = 0,
    WARN = 3,
    debug = <function 1956>,
    error = <function 1957>,
    get_filename = <function 1958>,
    info = <function 1959>,
    levels = <table 39>,
    set_level = <function 1960>,
    should_log = <function 1961>,
    trace = <function 1962>,
    warn = <function 1963>
  },
  ["vim.lsp.protocol"] = <table 40>,
  ["vim.lsp.rpc"] = <table 41>,
  ["vim.lsp.util"] = <table 42>,
  ["vim.treesitter"] = <table 43>,
  ["vim.treesitter.highlighter"] = <table 44>,
  ["vim.treesitter.language"] = {
    inspect_language = <function 1006>,
    require_language = <function 1010>
  },
  ["vim.treesitter.languagetree"] = <table 49>,
  ["vim.treesitter.query"] = {
    add_directive = <function 940>,
    add_predicate = <function 941>,
    get_node_text = <function 942>,
    get_query = <function 944>,
    get_query_files = <function 945>,
    list_directives = <function 1007>,
    list_predicates = <function 1008>,
    parse_query = <function 1009>,
    set_query = <function 1011>
  },
  ["vim.uri"] = {
    uri_from_bufnr = <function 1014>,
    uri_from_fname = <function 1015>,
    uri_to_bufnr = <function 1016>,
    uri_to_fname = <function 1964>
  }
}

E37: No write since last change
E162: No write since last change for buffer "/home/a/repos/dotfiles/.config/nvim/output.txt"
  1  h   "lua/neovim_configuration/themes/github.lua" line 6
  4  h   "lua/neovim_configuration/theme.lua" line 4
 10 #h   "init.lua"                     line 6
 17 %a + "~/repos/dotfiles/.config/nvim/output.txt" line 5
  1  h   "lua/neovim_configuration/themes/github.lua" line 6
  4  h   "lua/neovim_configuration/theme.lua" line 4
 10 #h   "init.lua"                     line 6
 17 %a + "~/repos/dotfiles/.config/nvim/output.txt" line 5
  1  h   "lua/neovim_configuration/themes/github.lua" line 6
  4  h   "lua/neovim_configuration/theme.lua" line 4
 10 #h   "init.lua"                     line 6
 17 %a + "~/repos/dotfiles/.config/nvim/output.txt" line 5
  1  h   "lua/neovim_configuration/themes/github.lua" line 6
  4  h   "lua/neovim_configuration/theme.lua" line 4
 10 #h   "init.lua"                     line 6
 17 %a + "~/repos/dotfiles/.config/nvim/output.txt" line 5
